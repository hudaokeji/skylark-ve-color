{"version":3,"sources":["skylark-domx-colorpicker.js"],"names":["define","skylark","langx","browser","noder","eventer","finder","$","plugins","Indicator","Plugin","inherit","klassName","pluginName","options","_construct","elm","this","overrided","listenTo","_velm","e","_start","_move","_dragging","offset","_offset","pageX","pageY","maxWidth","_maxWidth","maxHeight","_maxHeight","dragX","Math","max","min","left","dragY","top","onmove","apply","_elm","rightclick","which","button","onstart","arguments","$el","_query","height","width","$doc","document","mousemove","mouseup","_stop","find","addClass","stop","unlistenTo","removeClass","onstop","_delay","register","styler","fx","popups","Color","noop","pickers","replaceInput","join","markup","gradientFix","isIE","i","paletteTemplate","p","color","className","opts","html","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","noColorSelectedText","ColorPicker","beforeShow","move","change","show","hide","flat","showInput","allowEmpty","showButtons","clickoutFiresChange","showInitial","showPalette","showPaletteOnly","hideAfterPaletteSelect","togglePaletteOnly","showSelectionPalette","localStorageKey","appendTo","maxSelectionSize","cancelText","chooseText","togglePaletteMoreText","togglePaletteLessText","clearText","containerClassName","replacerClassName","showAlpha","theme","palette","selectionPalette","disabled","element","resize","debounce","reflow","visible","isDragging","dragWidth","dragHeight","dragHelperHeight","slideHeight","alphaWidth","alphaSlideHelperWidth","slideHelperHeight","currentHue","currentSaturation","currentValue","currentAlpha","paletteArray","paletteLookup","slice","draggingClass","shiftMovementDirection","callbacks","bind","doc","ownerDocument","boundElement","body","container","pickerContainer","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","paletteContainer","initialColorContainer","cancelButton","clearButton","chooseButton","toggleButton","isInput","is","isInputTypeColor","inputTypeColorSupport","shouldReplace","replacer","offsetElement","previewElement","initialColor","val","colorOnShow","currentPreferredFormat","isEmpty","applyOptions","text","isArray","j","rgb","toggleClass","addColorToSelectionPalette","inArray","shift","drawPalette","currentColor","get","map","unique","reverse","getUniqueSelectionPalette","drawInitial","initial","dragStart","trigger","dragStop","setFromTextInput","value","isValid","set","updateOriginalInput","onkeydown","keyCode","clickout","revert","toggle","event","create","isDefaultPrevented","hideAll","on","window","updateUI","off","ignoreFormatChange","newColor","newHsv","toHsv","h","s","v","a","getFormat","round","updateHelperLocations","flatColor","css","toHexString","format","realColor","displayColor","realHex","realRgb","toRgb","realAlpha","gradient","toFilter","gradientType","alphaX","slideY","fireCallback","hasChanged","calcOffset","disable","after","parent","stopPropagation","target","preventDefault","click","setTimeout","keydown","hasClass","outerWidth","plugin","shiftKey","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setValue","paletteElementClick","data","ignore","closest","paletteEvent","initialize","mixin","option","optionName","optionValue","undefined","enable","coord","destroy","remove","spect","id","func","obj","Array","prototype","args","call","concat","localization","palettes","attach","main"],"mappings":";;;;;;;g4BAAAA,EAAA,sCACA,wBACA,sBACA,uBACA,qBACA,uBACA,sBACA,qBACA,wBACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAcA,IAAAC,EAAAD,EAAAE,OAAAC,SACAC,UAAA,YAEAC,WAAA,iBAEAC,WAGAC,WAAA,SAAAC,EAAAF,GACAG,KAAAC,UAAAF,EAAAF,GAEAG,KAAAE,SAAAF,KAAAG,MAAAJ,GAAA,YAAAK,IACAJ,KAAAK,OAAAD,MAKAE,MAAA,SAAAF,GACA,GAAAJ,KAAAO,UAAA,CACA,IAAAC,EAAAR,KAAAS,QACAC,EAAAN,EAAAM,MACAC,EAAAP,EAAAO,MACAC,EAAAZ,KAAAa,UACAC,EAAAd,KAAAe,WAEAC,EAAAC,KAAAC,IAAA,EAAAD,KAAAE,IAAAT,EAAAF,EAAAY,KAAAR,IACAS,EAAAJ,KAAAC,IAAA,EAAAD,KAAAE,IAAAR,EAAAH,EAAAc,IAAAR,IAEAS,EAAAvB,KAAAH,QAAA0B,OACAA,GACAA,EAAAC,MAAAxB,KAAAyB,MAAAT,EAAAK,EAAAjB,MAKAC,OAAA,SAAAD,GACA,IAAAsB,EAAAtB,EAAA,MAAA,GAAAA,EAAAuB,MAAA,GAAAvB,EAAAwB,OAEA,IAAAF,IAAA1B,KAAAO,UAAA,CACA,IAAAsB,EAAA7B,KAAAH,QAAAgC,QACA,IAAAA,IAAA,IAAAA,EAAAL,MAAAxB,KAAAyB,KAAAK,WAAA,CACA9B,KAAAO,WAAA,EACA,IAAAwB,EAAA/B,KAAAgC,SAEAhC,KAAAe,WAAAgB,EAAAE,SACAjC,KAAAa,UAAAkB,EAAAG,QACAlC,KAAAS,QAAAsB,EAAAvB,SAEA,IAAA2B,EAAAnC,KAAAgC,OAAAI,UAEApC,KAAAE,SAAAiC,GACAE,UAAAjC,IACAJ,KAAAM,MAAAF,IAEAkC,QAAAlC,IACAJ,KAAAuC,MAAAnC,MAGA+B,EAAAK,KAAA,QAAAC,SAAA,eAEAzC,KAAAM,MAAAF,GAEAhB,EAAAsD,KAAAtC,MAKAmC,MAAA,SAAAnC,GACA,IAAA+B,EAAAnC,KAAAgC,OAAAI,UACApC,KAAAO,YACAP,KAAA2C,WAAAR,GACAA,EAAAK,KAAA,QAAAI,YAAA,eAEAC,OAAA7C,KAAAH,QAAAgD,OAIAA,QACA7C,KAAA8C,OAAA,WACAD,OAAArB,MAAAxB,KAAAyB,KAAAK,cAIA9B,KAAAO,WAAA,KAMA,OAFAhB,EAAAwD,SAAAvD,GAEAA,IAEAT,EAAA,wCACA,wBACA,sBACA,uBACA,qBACA,sBACA,qBACA,uBACA,sBACA,kBACA,uBACA,sBACA,yBACA,eACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAC,EAAAF,EAAA4D,EAAAC,EAAA1D,EAAA2D,EAAAC,EAAA3D,GACA,aAEA,IAAA4D,EAAAnE,EAAAmE,KAEAC,KACAC,GACA,4BACA,qEACA,mCACA,UACAC,KAAA,IAEAC,EAAA,WAIA,IAAAC,EAAA,GACA,GAAAvE,EAAAwE,KACA,IAAA,IAAAC,EAAA,EAAAA,GAAA,EAAAA,IACAF,GAAA,kBAAAE,EAAA,WAIA,OACA,uCACA,qCACA,gDACA,kDACA,4DACA,SACA,SACA,oCACA,6BACA,8BACA,6BACA,yBACA,uBACA,uBACA,iCACA,SACA,SACA,SACA,0CACA,SACA,uBACA,gCACAF,EACA,SACA,SACA,oGACA,SACA,yCACA,6DACA,SACA,gDACA,0CACA,qCACA,oDACA,SACA,SACA,UACAF,KAAA,IAjDA,GAoDA,SAAAK,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IADA,IAAAC,KACAN,EAAA,EAAAA,EAAAE,EAAAK,OAAAP,IAAA,CACA,IAAAQ,EAAAN,EAAAF,GACA,GAAAQ,EAAA,CACA,IAAAC,EAAAjB,EAAAkB,MAAAF,GACAG,EAAAF,EAAAG,QAAAC,EAAA,GAAA,4BAAA,6BACAF,GAAAnB,EAAAsB,OAAAX,EAAAK,GAAA,mBAAA,GACA,IAAAO,EAAAN,EAAAO,SAAAX,EAAAY,iBAAA,OACAC,EAAA,oBAAAT,EAAAU,cACAb,EAAAc,KAAA,gBAAAL,EAAA,iBAAAN,EAAAU,cAAA,YAAAR,EAAA,yCAAAO,EAAA,oBACA,CAEAZ,EAAAc,KAAAzF,EAAA,WACA0F,OAAA1F,EAAA,8FACA2F,KAAA,QAAAjB,EAAAkB,sBAEAjB,SAIA,MAAA,qBAAAF,EAAA,KAAAE,EAAAV,KAAA,IAAA,SAYA,IAAA4B,EAAA5F,EAAAE,OAAAC,SACAC,UAAA,cAEAC,WAAA,mBAEAC,SAGAuF,WAAAhC,EACAiC,KAAAjC,EACAkC,OAAAlC,EACAmC,KAAAnC,EACAoC,KAAApC,EAGAU,OAAA,EACA2B,MAAA,EACAC,WAAA,EACAC,YAAA,EACAC,aAAA,EACAC,qBAAA,EACAC,aAAA,EACAC,aAAA,EACAC,iBAAA,EACAC,wBAAA,EACAC,mBAAA,EACAC,sBAAA,EACAC,iBAAA,EACAC,SAAA,OACAC,iBAAA,EACAC,WAAA,SACAC,WAAA,SACAC,sBAAA,OACAC,sBAAA,OACAC,UAAA,wBACAzB,oBAAA,oBACAN,iBAAA,EACAb,UAAA,GACA6C,mBAAA,GACAC,kBAAA,GACAC,WAAA,EACAC,MAAA,WACAC,UACA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,YAEAC,oBACAC,UAAA,EACA1G,OAAA,MAIAV,WAAA,SAAAC,EAAAF,GACAG,KAAAC,UAAAF,EAAAF,GAIA,IAAAmE,EAAAhE,KAAAH,QACAsH,EAAAnH,KAAAyB,KACAgE,EAAAzB,EAAAyB,KACAU,EAAAnC,EAAAmC,qBACAY,EAAA/C,EAAA+C,MACAK,EAAAnI,EAAAoI,SAAAC,GAAA,IACAC,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAnB,KACAoB,KACAC,KACApB,EAAAjD,EAAAiD,iBAAAqB,MAAA,GACAhC,EAAAtC,EAAAsC,iBACAiC,EAAA,cACAC,EAAA,KAGAC,EAAAzE,EAAAyE,WACApD,KAAAqD,EAAA1E,EAAAqB,KAAAtF,GACAuF,OAAAoD,EAAA1E,EAAAsB,OAAAvF,GACAwF,KAAAmD,EAAA1E,EAAAuB,KAAAxF,GACAyF,KAAAkD,EAAA1E,EAAAwB,KAAAzF,GACAqF,WAAAsD,EAAA1E,EAAAoB,WAAArF,IAGA4I,EAAAxB,EAAAyB,cAEAC,GADAF,EAAAG,KACAxJ,EAAA6H,IACAD,GAAA,EACA6B,EAAAzJ,EAAAkE,EAAAmF,GAAAlG,SAAAsE,GACAiC,EAAAD,EAAAvG,KAAA,wBACAyG,EAAAF,EAAAvG,KAAA,aACA0G,EAAAH,EAAAvG,KAAA,eACA2G,EAAAJ,EAAAvG,KAAA,WACA4G,EAAAL,EAAAvG,KAAA,cACA6G,EAAAN,EAAAvG,KAAA,mBACA8G,EAAAP,EAAAvG,KAAA,aACA+G,EAAAR,EAAAvG,KAAA,oBACAgH,EAAAT,EAAAvG,KAAA,aACAiH,GAAAV,EAAAvG,KAAA,eACAkH,GAAAX,EAAAvG,KAAA,eACAmH,GAAAZ,EAAAvG,KAAA,cACAoH,GAAAb,EAAAvG,KAAA,aACAqH,GAAAd,EAAAvG,KAAA,cACAsH,GAAAf,EAAAvG,KAAA,sBACAuH,GAAAlB,EAAAmB,GAAA,SACAC,GAAAF,IAAA,UAAAlB,EAAA5D,KAAA,SAAAiF,wBACAC,GAAAJ,KAAAtE,EACA2E,GAAA,GAAA9K,EAAAgE,GAAAb,SAAAsE,GAAAtE,SAAAuB,EAAAD,WAAAtB,SAAAuB,EAAA6C,mBAAAvH,MACA+K,GAAA,GAAAD,GAAAvB,EACAyB,GAAAF,GAAA5H,KAAA,qBACA+H,GAAAvG,EAAAF,OAAAiG,IAAAlB,EAAA2B,MACAC,IAAA,EACAC,GAAA1G,EAAAY,gBACAiB,IAAA7B,EAAA4B,aAAA5B,EAAA6B,oBACA8E,IAAAJ,GACA5E,GAAA3B,EAAA2B,aAAAsE,GAEA,SAAAW,KAQA,GANA5G,EAAAgC,kBACAhC,EAAA+B,aAAA,GAGA+D,GAAAe,KAAA7G,EAAAgC,gBAAAhC,EAAAyC,sBAAAzC,EAAA0C,uBAEA1C,EAAAgD,QAAA,CACAA,EAAAhD,EAAAgD,QAAAsB,MAAA,GACAF,EAAAnJ,EAAA6L,QAAA9D,EAAA,IAAAA,GAAAA,GACAqB,KACA,IAAA,IAAA1E,EAAA,EAAAA,EAAAyE,EAAAlE,OAAAP,IACA,IAAA,IAAAoH,EAAA,EAAAA,EAAA3C,EAAAzE,GAAAO,OAAA6G,IAAA,CACA,IAAAC,EAAA7H,EAAAkB,MAAA+D,EAAAzE,GAAAoH,IAAAjG,cACAuD,EAAA2C,IAAA,GAKAjC,EAAAkC,YAAA,UAAAxF,GACAsD,EAAAkC,YAAA,qBAAAjH,EAAA0B,WACAqD,EAAAkC,YAAA,mBAAAjH,EAAA8C,WACAiC,EAAAkC,YAAA,mBAAAtF,IACAoD,EAAAkC,YAAA,uBAAAjH,EAAA4B,aACAmD,EAAAkC,YAAA,+BAAAjH,EAAAkC,mBACA6C,EAAAkC,YAAA,uBAAAjH,EAAA+B,aACAgD,EAAAkC,YAAA,kBAAAjH,EAAAgC,iBACA+C,EAAAkC,YAAA,uBAAAjH,EAAA8B,aACAiD,EAAAtG,SAAAuB,EAAAD,WAAAtB,SAAAuB,EAAA4C,oBAEAU,KA6NA,SAAA4D,GAAApH,GACA,GAAAqC,EAAA,CACA,IAAA6E,EAAA7H,EAAAkB,MAAAP,GAAAgB,cACA,IAAAuD,EAAA2C,KAAA,IAAA/L,EAAAkM,QAAAH,EAAA/D,GAEA,IADAA,EAAAlC,KAAAiG,GACA/D,EAAA/C,OAAAoC,GACAW,EAAAmE,SAqBA,SAAAC,KAEA,IAAAC,EAAAC,KAEAtH,EAAAhF,EAAAuM,IAAApD,EAAA,SAAApB,EAAArD,GACA,OAAAC,EAAAoD,EAAAsE,EAAA,iCAAA3H,EAAAK,KAGAiD,GACAhD,EAAAc,KAAAnB,EAxBA,WACA,IAAA6H,KACA,GAAAzH,EAAA+B,YACA,IAAA,IAAApC,EAAA,EAAAA,EAAAsD,EAAA/C,OAAAP,IAAA,CACA,IAAAqH,EAAA7H,EAAAkB,MAAA4C,EAAAtD,IAAAmB,cAEAuD,EAAA2C,IACAS,EAAA1G,KAAAkC,EAAAtD,IAKA,OAAA8H,EAAAC,UAAApD,MAAA,EAAAtE,EAAAsC,kBAYAqF,GAAAL,EAAA,0CAAAtH,IAGAyF,GAAAxF,KAAAA,EAAAV,KAAA,KAGA,SAAAqI,KACA,GAAA5H,EAAA8B,YAAA,CACA,IAAA+F,EAAApB,GACAtG,EAAAoH,KACA7B,GAAAzF,KAAAL,GAAAiI,EAAA1H,GAAAA,EAAA,yBAAAH,KAIA,SAAA8H,MACApE,GAAA,GAAAD,GAAA,GAAAG,GAAA,IACAN,KAEAE,GAAA,EACAuB,EAAAtG,SAAA8F,GACAC,EAAA,KACAK,EAAAkD,QAAA,yBAAAR,OAGA,SAAAS,KACAxE,GAAA,EACAuB,EAAAnG,YAAA2F,GACAM,EAAAkD,QAAA,wBAAAR,OAGA,SAAAU,KAEA,IAAAC,EAAA1C,EAAAgB,MAEA,GAAA,OAAA0B,GAAA,KAAAA,IAAAvG,GAKA,CACA,IAAAvB,EAAAjB,EAAAkB,MAAA6H,GACA9H,EAAA+H,WACAC,GAAAhI,GACAiB,KACAgH,MAGA7C,EAAA/G,SAAA,4BAZA2J,GAAA,MACA/G,KACAgH,KAgBA,SAAAC,GAAAlM,GAEA,KAAAA,EAAAmM,SACA/G,KAIA,SAAAgH,GAAApM,GAEA,GAAAA,EAAAwB,SAIA4F,IAEA3B,GACAwG,IAAA,GAGAI,KAEAjH,OAGA,SAAAkH,KACAnF,EACA/B,KAGAD,KAIA,SAAAA,KACA,IAAAoH,EAAAvN,EAAAwN,OAAA,0BAEArF,EACAD,MAIAuB,EAAAkD,QAAAY,GAAApB,QAEA,IAAA9C,EAAArD,WAAAmG,OAAAoB,EAAAE,wBAvgBA,WACA,IAAA,IAAAlJ,EAAA,EAAAA,EAAAN,EAAAa,OAAAP,IACAN,EAAAM,IACAN,EAAAM,GAAA6B,OAwgBAsH,GACAvF,GAAA,EAEAjI,EAAAqJ,GAAAoE,GAAA,sBAAAT,IACAhN,EAAAqJ,GAAAoE,GAAA,oBAAAP,IACAlN,EAAA0N,QAAAD,GAAA,qBAAA3F,GACAgD,GAAA3H,SAAA,aACAsG,EAAAnG,YAAA,aAEA0E,KACA2F,KAEAxC,GAAAc,KAEAK,KACAnD,EAAAlD,KAAAkF,IACA5B,EAAAkD,QAAA,oBAAAtB,OAEA,SAAAjF,KAEA+B,IAAA9B,IACA8B,GAAA,EAEAjI,EAAAqJ,GAAAuE,IAAA,sBAAAZ,IACAhN,EAAAqJ,GAAAuE,IAAA,oBAAAV,IACAlN,EAAA0N,QAAAE,IAAA,qBAAA9F,GAEAgD,GAAAxH,YAAA,aACAmG,EAAAtG,SAAA,aAEAgG,EAAAjD,KAAA+F,MACA1C,EAAAkD,QAAA,oBAAAR,QAGA,SAAAkB,KACAL,GAAA3B,IAAA,GACA4B,IAAA,GAGA,SAAAD,GAAAtI,EAAAqJ,GAQA,IAAAC,EAAAC,EAPAlK,EAAAsB,OAAAX,EAAAyH,MAGA0B,OAKAnJ,GAAA6B,GACAgF,IAAA,GAEAA,IAAA,EACAyC,EAAAjK,EAAAkB,MAAAP,GACAuJ,EAAAD,EAAAE,QAEAtF,EAAAqF,EAAAE,EAAA,IAAA,IACAtF,EAAAoF,EAAAG,EACAtF,EAAAmF,EAAAI,EACAtF,EAAAkF,EAAAK,GAEAT,KAEAG,GAAAA,EAAAjB,YAAAgB,IACAzC,GAAA1G,EAAAY,iBAAAwI,EAAAO,cAIA,SAAApC,GAAAvH,GAGA,OAFAA,EAAAA,MAEA2B,IAAAgF,GACA,KAYAxH,EAAAkB,OACAkJ,EAAA,IAAAvF,EACAwF,EAAAvF,EACAwF,EAAAvF,EACAwF,EAAAzM,KAAA2M,MAAA,IAAAzF,GAAA,MAQA,SAAA9C,KACA4H,KAEAxE,EAAApD,KAAAkG,MACA1C,EAAAkD,QAAA,oBAAAR,OAGA,SAAA0B,KAEAzD,EAAA5G,YAAA,uBAEAiL,KAIA,IAAAC,EAAA3K,EAAAkB,OACAkJ,EAAA,IAAAvF,EACAwF,EAAA,EACAC,EAAA,IAEAxE,EAAA8E,IAAA,mBAAAD,EAAAE,eAGA,IAAAC,EAAAvD,GACAvC,EAAA,IAAA,IAAAA,GAAA,SAAA8F,KACA,QAAAA,GAAA,SAAAA,GAAA,SAAAA,GAAA,SAAAA,IACAA,EAAA,QAIA,IAAAC,EAAA3C,IAAA0C,OAAAA,IACAE,EAAA,GAMA,GAHA7D,GAAA1H,YAAA,oBACA0H,GAAAyD,IAAA,mBAAA,gBAEAG,GAAAvI,GAEA2E,GAAA7H,SAAA,wBAEA,CACA,IAAA2L,EAAAF,EAAAF,cACAK,EAAAH,EAAApJ,cAKA,GAFAwF,GAAAyD,IAAA,mBAAAM,GAEArK,EAAA8C,UAAA,CACA,IAAAkE,EAAAkD,EAAAI,QACAtD,EAAA0C,EAAA,EACA,IAAAa,EAAApL,EAAAkB,MAAA2G,GAAAlG,cACA0J,EAAA,yBAAAD,EAAA,KAAAH,EAAA,IAEAlP,EAAAwE,KACA2F,EAAA0E,IAAA,SAAA5K,EAAAkB,MAAAkK,GAAAE,UAAAC,aAAA,GAAAN,KAGA/E,EAAA0E,IAAA,aAAA,WAAAS,GACAnF,EAAA0E,IAAA,aAAA,QAAAS,GACAnF,EAAA0E,IAAA,aAAA,OAAAS,GAEAnF,EAAA0E,IAAA,aACA,6BAAAQ,EAAA,KAAAH,EAAA,MAIAD,EAAAD,EAAAvJ,SAAAsJ,GAIAjK,EAAA0B,WACA8D,EAAAgB,IAAA2D,GAGAnK,EAAA+B,aACAsF,KAGAO,KAGA,SAAAiC,KACA,IAAAL,EAAAvF,EACAwF,EAAAvF,EAEA,GAAAvC,IAAAgF,GAEApB,EAAA/D,OACA4D,EAAA5D,OACA0D,EAAA1D,WAEA,CAEA+D,EAAAhE,OACA6D,EAAA7D,OACA2D,EAAA3D,OAGA,IAAAvE,EAAAwM,EAAA/F,EACApG,EAAAqG,EAAA+F,EAAA/F,EACA1G,EAAAC,KAAAC,KACAyG,EACA1G,KAAAE,IAAAsG,EAAAE,EAAA3G,EAAA2G,IAEAtG,EAAAJ,KAAAC,KACAyG,EACA1G,KAAAE,IAAAuG,EAAAC,EAAAtG,EAAAsG,IAEAuB,EAAA6E,KACAzM,IAAAD,EAAA,KACAD,KAAAJ,EAAA,OAGA,IAAA2N,EAAAxG,EAAAN,EACA0B,EAAAwE,KACA3M,KAAAuN,EAAA7G,EAAA,EAAA,OAIA,IAAA8G,EAAA,EAAAhH,EACAwB,EAAA2E,KACAzM,IAAAsN,EAAA7G,EAAA,QAKA,SAAAsE,GAAAwC,GACA,IAAA/K,EAAAyH,KACA4C,EAAA,GACAW,GAAA3L,EAAAsB,OAAAX,EAAA2G,IAEA3G,IACAqK,EAAArK,EAAAa,SAAA+F,IAEAQ,GAAApH,IAGAiG,IACAlB,EAAA2B,IAAA2D,GAGAU,GAAAC,IACArG,EAAAnD,OAAAxB,GACA+E,EAAAkD,QAAA,UAAAjI,KAIA,SAAAwD,KACAC,IAGAE,EAAAwB,EAAA/G,QACAwF,EAAAuB,EAAAhH,SACA0F,EAAAuB,EAAAjH,SACAkH,EAAAjH,QACA0F,EAAAuB,EAAAlH,SACA8F,EAAAqB,EAAAnH,SACA4F,EAAAyB,EAAApH,QACA4F,EAAAyB,EAAArH,QAEAuD,IACAsD,EAAAgF,IAAA,WAAA,YACA/J,EAAAxD,OACAuI,EAAAvI,OAAAwD,EAAAxD,QAEAuI,EAAAvI,OAAA0C,EAAA6L,WAAAhG,EAAA,GAAAsB,GAAA,MAIAwD,KAEA7J,EAAA+B,aACAsF,KAGAxC,EAAAkD,QAAA,uBAiCA,SAAAiD,KACAxJ,KACA0B,GAAA,EACA2B,EAAA5D,KAAA,YAAA,GACAoF,GAAA5H,SAAA,gBAtpBA,WAEAvD,EAAAwE,MACAqF,EAAAvG,KAAA,gBAAAyC,KAAA,eAAA,MAGA2F,KAEAT,IACAtB,EAAAoG,MAAA7E,IAAA5E,OAGAG,IACAiE,GAAApE,OAGA,GAAAC,EACAoD,EAAAoG,MAAAlG,GAAAvD,WAEA,CAEA,IAAAa,EAAA,WAAArC,EAAAqC,SAAAwC,EAAAqG,SAAA5P,EAAA0E,EAAAqC,UACA,IAAAA,EAAAnC,SACAmC,EAAA/G,EAAA,SAGA+G,EAAArB,OAAA+D,GAGAsB,GAAA0C,GAAA,2CAAA,SAAA3M,GACA8G,GACAwF,KAGAtM,EAAA+O,kBAEA7P,EAAAc,EAAAgP,QAAApF,GAAA,UACA5J,EAAAiP,oBAIAxG,EAAAmB,GAAA,eAAA,IAAAhG,EAAAkD,WACA8H,KAIAjG,EAAAuG,MAAAH,GAGA3F,EAAAlE,OAAA2G,IACAzC,EAAAuD,GAAA,QAAA,WACAwC,WAAAtD,GAAA,KAEAzC,EAAAgG,QAAA,SAAApP,GAAA,IAAAA,EAAAmM,SAAAN,OAEAtC,GAAAkB,KAAA7G,EAAAuC,YACAoD,GAAAoD,GAAA,oBAAA,SAAA3M,GACAA,EAAA+O,kBACA/O,EAAAiP,iBACA5C,KACAjH,OAGAoE,GAAA3E,KAAA,QAAAjB,EAAA2C,WACAiD,GAAAmD,GAAA,oBAAA,SAAA3M,GACAA,EAAA+O,kBACA/O,EAAAiP,iBACA1E,IAAA,EACAtF,KAEAI,GAEA4G,IAAA,KAIAxC,GAAAgB,KAAA7G,EAAAwC,YACAqD,GAAAkD,GAAA,oBAAA,SAAA3M,GACAA,EAAA+O,kBACA/O,EAAAiP,iBAEAnQ,EAAAwE,MAAA8F,EAAAQ,GAAA,WACAR,EAAAuC,QAAA,UA4WAvC,EAAAiG,SAAA,yBAxWApD,IAAA,GACA7G,QAIAsE,GAAAe,KAAA7G,EAAAgC,gBAAAhC,EAAAyC,sBAAAzC,EAAA0C,uBACAoD,GAAAiD,GAAA,iBAAA,SAAA3M,GACAA,EAAA+O,kBACA/O,EAAAiP,iBAEArL,EAAAgC,iBAAAhC,EAAAgC,gBAOAhC,EAAAgC,iBAAAP,GACAsD,EAAAgF,IAAA,OAAA,MAAA/E,EAAA0G,YAAA,GAAA,IAEA9E,OAGAtB,EAAAqG,OAAA,kBACApO,OAAA,SAAAP,EAAAK,EAAAjB,GACA+H,EAAAnH,EAAA6G,EACA8C,IAAA,EACAvK,EAAAwP,WACAzH,EAAAlH,KAAA2M,MAAA,GAAAzF,GAAA,IAGA9C,MAEAxD,QAAAiK,GACAjJ,OAAAmJ,KAGA7C,EAAAwG,OAAA,kBACApO,OAAA,SAAAP,EAAAK,EAAAjB,GACA4H,EAAA6H,WAAAxO,EAAAuG,GACA+C,IAAA,EACA3G,EAAA8C,YACAqB,EAAA,GAEA9C,MAEAxD,QAAAiK,GACAjJ,OAAAmJ,KAGA/C,EAAA0G,OAAA,kBACApO,OAAA,SAAAP,EAAAK,EAAAjB,GAGA,GAAAA,EAAAwP,UAGA,IAAApH,EAAA,CACA,IAAAsH,EAAA7H,EAAAR,EACAsI,EAAArI,EAAAQ,EAAAR,EACAsI,EAAA/O,KAAAgP,IAAAjP,EAAA8O,GAAA7O,KAAAgP,IAAA5O,EAAA0O,GAEAvH,EAAAwH,EAAA,IAAA,UAPAxH,EAAA,KAUA,IACA0H,GAAA1H,GAAA,MAAAA,IADAA,GAAA,MAAAA,KAIAP,EAAA4H,WAAA7O,EAAAyG,IAEAyI,IACAhI,EAAA2H,YAAAnI,EAAArG,GAAAqG,IAGAiD,IAAA,EACA3G,EAAA8C,YACAqB,EAAA,GAGA9C,MAEAxD,QAAAiK,GACAjJ,OAAAmJ,KAGAzB,IACA6B,GAAA7B,IAIA0C,KACAvC,GAAA1G,EAAAY,iBAAAzB,EAAAkB,MAAAkG,IAAA0D,OAEA/C,GAAAX,KAGA0C,KAGAxH,GACAF,KAGA,SAAA4K,EAAA/P,GAmBA,OAlBAA,EAAAgQ,MAAAhQ,EAAAgQ,KAAAC,QACAjE,GAAA9M,EAAAc,EAAAgP,QAAAkB,QAAA,gBAAAF,KAAA,UACA/K,OAGA+G,GAAA9M,EAAAc,EAAAgP,QAAAkB,QAAA,gBAAAF,KAAA,UACA/K,KAIArB,EAAAiC,wBACAoG,IAAA,GACA7G,MAEA6G,OAIA,EAGA,IAAAkE,EAAArR,EAAAwE,KAAA,wBAAA,2CACA+F,GAAAsD,GAAAwD,EAAA,eAAAJ,GACAzG,GAAAqD,GAAAwD,EAAA,6BAAAF,QAAA,GAAAF,GAwcAK,GAEAvR,EAAAwR,MAAAzQ,MACAuF,KAAAA,GACAC,KAAAA,GACAkH,OAAAA,GACApF,OAAAA,GACAoJ,OAzCA,SAAAC,EAAAC,GACA,QAAAC,IAAAF,EACA,OAAA1R,EAAAwR,SAAAzM,GAEA,QAAA6M,IAAAD,EACA,OAAA5M,EAAA2M,GAGA3M,EAAA2M,GAAAC,EAEA,oBAAAD,IACAjG,GAAA1G,EAAAY,iBAEAgG,MA6BAkG,OA1BA,WACA5J,GAAA,EACA2B,EAAA5D,KAAA,YAAA,GACAoF,GAAAzH,YAAA,gBAwBAoM,QAAAA,GACAxO,OAfA,SAAAuQ,GACA/M,EAAAxD,OAAAuQ,EACAzJ,MAcA8E,IAAA,SAAA9H,GACA8H,GAAA9H,GACA+H,MAEAd,IAAAA,GACAyF,QA1DA,WACAnI,EAAAtD,OACA8E,GAAA6C,IAAA,4CACAnE,EAAAkI,SACA7G,GAAA6G,SACA5N,EAAA6N,MAAAC,IAAA,MAsDApI,UAAAA,OAWA,SAAAoG,EAAA/O,GACAA,EAAA+O,kBAOA,SAAAzG,EAAA0I,EAAAC,GACA,IAAA/I,EAAAgJ,MAAAC,UAAAjJ,MACAkJ,EAAAlJ,EAAAmJ,KAAA3P,UAAA,GACA,OAAA,WACA,OAAAsP,EAAA5P,MAAA6P,EAAAG,EAAAE,OAAApJ,EAAAmJ,KAAA3P,cAQA,OAzBAvC,EAAAwD,SAAAoC,EAAA,eAqBAA,EAAAwM,gBACAxM,EAAAyM,YAGA5S,EAAA6S,OAAA,mBAAA1M,KAIApG,EAAA,0CACA,kBACA,SAAAoG,GACA,IAAAwM,EAAAxM,EAAAwM,aAAA,IACApL,WAAA,KACAC,WAAA,MAGA,OAAAmL,IAEA5S,EAAA,6CACA,kBACA,SAAAoG,GACA,IAAAwM,EAAAxM,EAAAwM,aAAA,UACApL,WAAA,KACAC,WAAA,KACAG,UAAA,KACAF,sBAAA,OACAC,sBAAA,KACAxB,oBAAA,YAGA,OAAAyM,IAIA5S,EAAA,6CACA,kBACA,SAAAoG,GACA,IAAAwM,EAAAxM,EAAAwM,aAAA,UACApL,WAAA,KACAC,WAAA,KACAG,UAAA,KACAF,sBAAA,OACAC,sBAAA,KACAxB,oBAAA,YAGA,OAAAyM,IAGA5S,EAAA,iCACA,gBACA,kBACA,qBACA,sBACA,SAAAoG,GACA,OAAAA,IAGApG,EAAA,4BAAA,iCAAA,SAAA+S,GAAA,OAAAA","file":"../skylark-domx-colorpicker.js","sourcesContent":["define('skylark-domx-colorpicker/Indicator',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\"    \r\n],function(skylark, langx, browser, noder, eventer,finder, $,plugins) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            var onstart = this.options.onstart || funcs.noop;\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\r\n    var Indicator = plugins.Plugin.inherit({\r\n        klassName : \"Indicator\",\r\n\r\n        pluginName : \"domx.indicator\",\r\n\r\n        options : {\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.listenTo(this._velm(elm),\"mousedown\" , (e) => {\r\n                this._start(e);\r\n            });\r\n\r\n        },\r\n\r\n        _move : function(e) {\r\n            if (this._dragging) {\r\n                var offset = this._offset,\r\n                    pageX = e.pageX,\r\n                    pageY = e.pageY,\r\n                    maxWidth = this._maxWidth,\r\n                    maxHeight = this._maxHeight;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                var onmove = this.options.onmove;\r\n                if (onmove) {\r\n                    onmove.apply(this._elm, [dragX, dragY, e]);\r\n                }\r\n            }\r\n        },\r\n\r\n        _start : function(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !this._dragging) {\r\n                var onstart = this.options.onstart;\r\n                if (!onstart || onstart.apply(this._elm, arguments) !== false) {\r\n                    this._dragging = true;\r\n                    var $el = this._query();\r\n\r\n                    this._maxHeight = $el.height();\r\n                    this._maxWidth = $el.width();\r\n                    this._offset = $el.offset();\r\n\r\n                    var $doc = this._query(document)\r\n\r\n                    this.listenTo($doc,{\r\n                        \"mousemove\" : (e) => {\r\n                            this._move(e);\r\n                        },\r\n                        \"mouseup\" : (e) => {\r\n                            this._stop(e);\r\n                        }                \r\n                    });\r\n                    $doc.find(\"body\").addClass(\"sp-dragging\");\r\n\r\n                    this._move(e);\r\n\r\n                    eventer.stop(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop : function(e) {\r\n            var $doc = this._query(document);\r\n            if (this._dragging) {\r\n                this.unlistenTo($doc);\r\n                $doc.find(\"body\").removeClass(\"sp-dragging\");\r\n\r\n                onstop = this.options.onstop;\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                if (onstop) {\r\n                    this._delay(function() {\r\n                        onstop.apply(this._elm, arguments);\r\n                    });\r\n                }\r\n            }\r\n            this._dragging = false;            \r\n        }\r\n    });\r\n\r\n    plugins.register(Indicator);\r\n\r\n\treturn Indicator;\r\n});\ndefine('skylark-domx-colorpicker/ColorPicker',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./Indicator\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,Indicator) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n\r\n        // IE7-10 does not support gradients with multiple stops, so we need to simulate\r\n        //  that for the rainbow slider with 8 divs that each have a single gradient\r\n        var gradientFix = \"\";\r\n        if (browser.isIE) {\r\n            for (var i = 1; i <= 6; i++) {\r\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\r\n            }\r\n        }\r\n\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                                gradientFix,\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    function hideAll() {\r\n        for (var i = 0; i < pickers.length; i++) {\r\n            if (pickers[i]) {\r\n                pickers[i].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"domx.colorPicker\",\r\n\r\n        options : {\r\n\r\n            // Callbacks\r\n            beforeShow: noop,\r\n            move: noop,\r\n            change: noop,\r\n            show: noop,\r\n            hide: noop,\r\n\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            showInput: false,\r\n            allowEmpty: false,\r\n            showButtons: true,\r\n            clickoutFiresChange: true,\r\n            showInitial: false,\r\n            showPalette: false,\r\n            showPaletteOnly: false,\r\n            hideAfterPaletteSelect: false,\r\n            togglePaletteOnly: false,\r\n            showSelectionPalette: true,\r\n            localStorageKey: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            cancelText: \"cancel\",\r\n            chooseText: \"choose\",\r\n            togglePaletteMoreText: \"more\",\r\n            togglePaletteLessText: \"less\",\r\n            clearText: \"Clear Color Selection\",\r\n            noColorSelectedText: \"No Color Selected\",\r\n            preferredFormat: false,\r\n            className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            showAlpha: false,\r\n            theme: \"sp-light\",\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: [],\r\n            disabled: false,\r\n            offset: null\r\n\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            var opts = this.options,\r\n                element = this._elm,\r\n                flat = opts.flat,\r\n                showSelectionPalette = opts.showSelectionPalette,\r\n                theme = opts.theme,\r\n                resize = langx.debounce(reflow, 10),\r\n                visible = false,\r\n                isDragging = false,\r\n                dragWidth = 0,\r\n                dragHeight = 0,\r\n                dragHelperHeight = 0,\r\n                slideHeight = 0,\r\n                slideWidth = 0,\r\n                alphaWidth = 0,\r\n                alphaSlideHelperWidth = 0,\r\n                slideHelperHeight = 0,\r\n                currentHue = 0,\r\n                currentSaturation = 0,\r\n                currentValue = 0,\r\n                currentAlpha = 1,\r\n                palette = [],\r\n                paletteArray = [],\r\n                paletteLookup = {},\r\n                selectionPalette = opts.selectionPalette.slice(0),\r\n                maxSelectionSize = opts.maxSelectionSize,\r\n                draggingClass = \"sp-dragging\",\r\n                shiftMovementDirection = null;\r\n\r\n\r\n            var callbacks = opts.callbacks = {\r\n                'move': bind(opts.move, elm),\r\n                'change': bind(opts.change, elm),\r\n                'show': bind(opts.show, elm),\r\n                'hide': bind(opts.hide, elm),\r\n                'beforeShow': bind(opts.beforeShow, elm)\r\n            };\r\n\r\n            var doc = element.ownerDocument,\r\n                body = doc.body,\r\n                boundElement = $(element),\r\n                disabled = false,\r\n                container = $(markup, doc).addClass(theme),\r\n                pickerContainer = container.find(\".sp-picker-container\"),\r\n                dragger = container.find(\".sp-color\"),\r\n                dragHelper = container.find(\".sp-dragger\"),\r\n                slider = container.find(\".sp-hue\"),\r\n                slideHelper = container.find(\".sp-slider\"),\r\n                alphaSliderInner = container.find(\".sp-alpha-inner\"),\r\n                alphaSlider = container.find(\".sp-alpha\"),\r\n                alphaSlideHelper = container.find(\".sp-alpha-handle\"),\r\n                textInput = container.find(\".sp-input\"),\r\n                paletteContainer = container.find(\".sp-palette\"),\r\n                initialColorContainer = container.find(\".sp-initial\"),\r\n                cancelButton = container.find(\".sp-cancel\"),\r\n                clearButton = container.find(\".sp-clear\"),\r\n                chooseButton = container.find(\".sp-choose\"),\r\n                toggleButton = container.find(\".sp-palette-toggle\"),\r\n                isInput = boundElement.is(\"input\"),\r\n                isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n                shouldReplace = isInput && !flat,\r\n                replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                offsetElement = (shouldReplace) ? replacer : boundElement,\r\n                previewElement = replacer.find(\".sp-preview-inner\"),\r\n                initialColor = opts.color || (isInput && boundElement.val()),\r\n                colorOnShow = false,\r\n                currentPreferredFormat = opts.preferredFormat,\r\n                clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\r\n                isEmpty = !initialColor,\r\n                allowEmpty = opts.allowEmpty && !isInputTypeColor;\r\n\r\n            function applyOptions() {\r\n\r\n                if (opts.showPaletteOnly) {\r\n                    opts.showPalette = true;\r\n                }\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n\r\n                if (opts.palette) {\r\n                    palette = opts.palette.slice(0);\r\n                    paletteArray = langx.isArray(palette[0]) ? palette : [palette];\r\n                    paletteLookup = {};\r\n                    for (var i = 0; i < paletteArray.length; i++) {\r\n                        for (var j = 0; j < paletteArray[i].length; j++) {\r\n                            var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                            paletteLookup[rgb] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                container.toggleClass(\"sp-flat\", flat);\r\n                container.toggleClass(\"sp-input-disabled\", !opts.showInput);\r\n                container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\r\n                container.toggleClass(\"sp-clear-enabled\", allowEmpty);\r\n                container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\r\n                container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\r\n                container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\r\n                container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\r\n                container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\r\n                container.addClass(opts.className).addClass(opts.containerClassName);\r\n\r\n                reflow();\r\n            }\r\n\r\n            function initialize() {\r\n\r\n                if (browser.isIE) {\r\n                    container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n                }\r\n\r\n                applyOptions();\r\n\r\n                if (shouldReplace) {\r\n                    boundElement.after(replacer).hide();\r\n                }\r\n\r\n                if (!allowEmpty) {\r\n                    clearButton.hide();\r\n                }\r\n\r\n                if (flat) {\r\n                    boundElement.after(container).hide();\r\n                }\r\n                else {\r\n\r\n                    var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\r\n                    if (appendTo.length !== 1) {\r\n                        appendTo = $(\"body\");\r\n                    }\r\n\r\n                    appendTo.append(container);\r\n                }\r\n\r\n                offsetElement.on(\"click.ColorPicker touchstart.ColorPicker\", function (e) {\r\n                    if (!disabled) {\r\n                        toggle();\r\n                    }\r\n\r\n                    e.stopPropagation();\r\n\r\n                    if (!$(e.target).is(\"input\")) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n\r\n                if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\r\n                    disable();\r\n                }\r\n\r\n                // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n                container.click(stopPropagation);\r\n\r\n                // Handle user typed input\r\n                textInput.change(setFromTextInput);\r\n                textInput.on(\"paste\", function () {\r\n                    setTimeout(setFromTextInput, 1);\r\n                });\r\n                textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n                cancelButton.text(opts.cancelText);\r\n                cancelButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    revert();\r\n                    hide();\r\n                });\r\n\r\n                clearButton.attr(\"title\", opts.clearText);\r\n                clearButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    isEmpty = true;\r\n                    move();\r\n\r\n                    if(flat) {\r\n                        //for the flat style, this is a change event\r\n                        updateOriginalInput(true);\r\n                    }\r\n                });\r\n\r\n                chooseButton.text(opts.chooseText);\r\n                chooseButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    if (browser.isIE && textInput.is(\":focus\")) {\r\n                        textInput.trigger('change');\r\n                    }\r\n\r\n                    if (isValid()) {\r\n                        updateOriginalInput(true);\r\n                        hide();\r\n                    }\r\n                });\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n                toggleButton.on(\"click.spectrum\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    opts.showPaletteOnly = !opts.showPaletteOnly;\r\n\r\n                    // To make sure the Picker area is drawn on the right, next to the\r\n                    // Palette area (and not below the palette), first move the Palette\r\n                    // to the left to make space for the picker, plus 5px extra.\r\n                    // The 'applyOptions' function puts the whole container back into place\r\n                    // and takes care of the button-text and the sp-palette-only CSS class.\r\n                    if (!opts.showPaletteOnly && !flat) {\r\n                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\r\n                    }\r\n                    applyOptions();\r\n                });\r\n\r\n                alphaSlider.plugin(\"domx.indicator\", {\r\n                    \"onmove\" :   function (dragX, dragY, e) {\r\n                        currentAlpha = (dragX / alphaWidth);\r\n                        isEmpty = false;\r\n                        if (e.shiftKey) {\r\n                            currentAlpha = Math.round(currentAlpha * 10) / 10;\r\n                        }\r\n\r\n                        move();\r\n                    }, \r\n                    \"onstart\" : dragStart, \r\n                    \"onstop\" :dragStop\r\n                });\r\n\r\n                slider.plugin(\"domx.indicator\", {\r\n                    \"onmove\" :   function (dragX, dragY, e) {\r\n                        currentHue = parseFloat(dragY / slideHeight);\r\n                        isEmpty = false;\r\n                        if (!opts.showAlpha) {\r\n                            currentAlpha = 1;\r\n                        }\r\n                        move();\r\n                    }, \r\n                    \"onstart\" : dragStart, \r\n                    \"onstop\" :dragStop\r\n                });\r\n\r\n                dragger.plugin(\"domx.indicator\", {\r\n                    \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                        // shift+drag should snap the movement to either the x or y axis.\r\n                        if (!e.shiftKey) {\r\n                            shiftMovementDirection = null;\r\n                        }\r\n                        else if (!shiftMovementDirection) {\r\n                            var oldDragX = currentSaturation * dragWidth;\r\n                            var oldDragY = dragHeight - (currentValue * dragHeight);\r\n                            var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                            shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                        }\r\n\r\n                        var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\r\n                        var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\r\n\r\n                        if (setSaturation) {\r\n                            currentSaturation = parseFloat(dragX / dragWidth);\r\n                        }\r\n                        if (setValue) {\r\n                            currentValue = parseFloat((dragHeight - dragY) / dragHeight);\r\n                        }\r\n\r\n                        isEmpty = false;\r\n                        if (!opts.showAlpha) {\r\n                            currentAlpha = 1;\r\n                        }\r\n\r\n                        move();\r\n                    }, \r\n                    \"onstart\" : dragStart, \r\n                    \"onstop\" :dragStop\r\n                });\r\n\r\n                if (!!initialColor) {\r\n                    set(initialColor);\r\n\r\n                    // In case color was black - update the preview UI and set the format\r\n                    // since the set function will not run (default color is black).\r\n                    updateUI();\r\n                    currentPreferredFormat = opts.preferredFormat || Color.parse(initialColor).format;\r\n\r\n                    addColorToSelectionPalette(initialColor);\r\n                }\r\n                else {\r\n                    updateUI();\r\n                }\r\n\r\n                if (flat) {\r\n                    show();\r\n                }\r\n\r\n                function paletteElementClick(e) {\r\n                    if (e.data && e.data.ignore) {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n                    }\r\n                    else {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n\r\n                        // If the picker is going to close immediately, a palette selection\r\n                        // is a change.  Otherwise, it's a move only.\r\n                        if (opts.hideAfterPaletteSelect) {\r\n                            updateOriginalInput(true);\r\n                            hide();\r\n                        } else {\r\n                            updateOriginalInput();\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n                paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n                initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n            }\r\n\r\n\r\n            function addColorToSelectionPalette(color) {\r\n                if (showSelectionPalette) {\r\n                    var rgb = Color.parse(color).toRgbString();\r\n                    if (!paletteLookup[rgb] && langx.inArray(rgb, selectionPalette) === -1) {\r\n                        selectionPalette.push(rgb);\r\n                        while(selectionPalette.length > maxSelectionSize) {\r\n                            selectionPalette.shift();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getUniqueSelectionPalette() {\r\n                var unique = [];\r\n                if (opts.showPalette) {\r\n                    for (var i = 0; i < selectionPalette.length; i++) {\r\n                        var rgb = Color.parse(selectionPalette[i]).toRgbString();\r\n\r\n                        if (!paletteLookup[rgb]) {\r\n                            unique.push(selectionPalette[i]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return unique.reverse().slice(0, opts.maxSelectionSize);\r\n            }\r\n\r\n            function drawPalette() {\r\n\r\n                var currentColor = get();\r\n\r\n                var html = langx.map(paletteArray, function (palette, i) {\r\n                    return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n                });\r\n\r\n                if (selectionPalette) {\r\n                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n                }\r\n\r\n                paletteContainer.html(html.join(\"\"));\r\n            }\r\n\r\n            function drawInitial() {\r\n                if (opts.showInitial) {\r\n                    var initial = colorOnShow;\r\n                    var current = get();\r\n                    initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n                }\r\n            }\r\n\r\n            function dragStart() {\r\n                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\r\n                    reflow();\r\n                }\r\n                isDragging = true;\r\n                container.addClass(draggingClass);\r\n                shiftMovementDirection = null;\r\n                boundElement.trigger('dragstart.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                isDragging = false;\r\n                container.removeClass(draggingClass);\r\n                boundElement.trigger('dragstop.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function setFromTextInput() {\r\n\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && allowEmpty) {\r\n                    set(null);\r\n                    move();\r\n                    updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        set(tiny);\r\n                        move();\r\n                        updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            function onkeydown(e) {\r\n                // Close on ESC\r\n                if (e.keyCode === 27) {\r\n                    hide();\r\n                }\r\n            }\r\n\r\n            function clickout(e) {\r\n                // Return on right click.\r\n                if (e.button == 2) { return; }\r\n\r\n                // If a drag event was happening during the mouseup, don't hide\r\n                // on click.\r\n                if (isDragging) { return; }\r\n\r\n                if (clickoutFiresChange) {\r\n                    updateOriginalInput(true);\r\n                }\r\n                else {\r\n                    revert();\r\n                }\r\n                hide();\r\n            }\r\n\r\n            function toggle() {\r\n                if (visible) {\r\n                    hide();\r\n                }\r\n                else {\r\n                    show();\r\n                }\r\n            }\r\n\r\n            function show() {\r\n                var event = eventer.create('beforeShow.ColorPicker');\r\n\r\n                if (visible) {\r\n                    reflow();\r\n                    return;\r\n                }\r\n\r\n                boundElement.trigger(event, [ get() ]);\r\n\r\n                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                hideAll();\r\n                visible = true;\r\n\r\n                $(doc).on(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).on(\"click.ColorPicker\", clickout);\r\n                $(window).on(\"resize.ColorPicker\", resize);\r\n                replacer.addClass(\"sp-active\");\r\n                container.removeClass(\"sp-hidden\");\r\n\r\n                reflow();\r\n                updateUI();\r\n\r\n                colorOnShow = get();\r\n\r\n                drawInitial();\r\n                callbacks.show(colorOnShow);\r\n                boundElement.trigger('show.ColorPicker', [ colorOnShow ]);\r\n            }\r\n            function hide() {\r\n                // Return if hiding is unnecessary\r\n                if (!visible || flat) { return; }\r\n                visible = false;\r\n\r\n                $(doc).off(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).off(\"click.ColorPicker\", clickout);\r\n                $(window).off(\"resize.ColorPicker\", resize);\r\n\r\n                replacer.removeClass(\"sp-active\");\r\n                container.addClass(\"sp-hidden\");\r\n\r\n                callbacks.hide(get());\r\n                boundElement.trigger('hide.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function revert() {\r\n                set(colorOnShow, true);\r\n                updateOriginalInput(true);\r\n            }\r\n\r\n            function set(color, ignoreFormatChange) {\r\n                if (Color.equals(color, get())) {\r\n                    // Update UI just in case a validation error needs\r\n                    // to be cleared.\r\n                    updateUI();\r\n                    return;\r\n                }\r\n\r\n                var newColor, newHsv;\r\n                if (!color && allowEmpty) {\r\n                    isEmpty = true;\r\n                } else {\r\n                    isEmpty = false;\r\n                    newColor = Color.parse(color);\r\n                    newHsv = newColor.toHsv();\r\n\r\n                    currentHue = (newHsv.h % 360) / 360;\r\n                    currentSaturation = newHsv.s;\r\n                    currentValue = newHsv.v;\r\n                    currentAlpha = newHsv.a;\r\n                }\r\n                updateUI();\r\n\r\n                if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n                }\r\n            }\r\n\r\n            function get(opts) {\r\n                opts = opts || { };\r\n\r\n                if (allowEmpty && isEmpty) {\r\n                    return null;\r\n                }\r\n\r\n\r\n                /*\r\n                return fromRatio({\r\n                    h: currentHue,\r\n                    s: currentSaturation,\r\n                    v: currentValue,\r\n                    a: Math.round(currentAlpha * 1000) / 1000\r\n                }, { format: opts.format || currentPreferredFormat });\r\n                */\r\n                return Color.parse({\r\n                    h: currentHue * 360,\r\n                    s: currentSaturation,\r\n                    v: currentValue,\r\n                    a: Math.round(currentAlpha * 1000) / 1000\r\n                });\r\n            }\r\n\r\n            function isValid() {\r\n                return !textInput.hasClass(\"sp-validation-error\");\r\n            }\r\n\r\n            function move() {\r\n                updateUI();\r\n\r\n                callbacks.move(get());\r\n                boundElement.trigger('move.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function updateUI() {\r\n\r\n                textInput.removeClass(\"sp-validation-error\");\r\n\r\n                updateHelperLocations();\r\n\r\n                // Update dragger background color (gradients take care of saturation and value).\r\n                //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n                var flatColor = Color.parse({ \r\n                    h: currentHue * 360, \r\n                    s: 1, \r\n                    v: 1 \r\n                });\r\n                dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n                // Get a format that alpha will be included in (hex and names ignore alpha)\r\n                var format = currentPreferredFormat;\r\n                if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\r\n                    if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                        format = \"rgb\";\r\n                    }\r\n                }\r\n\r\n                var realColor = get({ format: format }),\r\n                    displayColor = '';\r\n\r\n                 //reset background info for preview element\r\n                previewElement.removeClass(\"sp-clear-display\");\r\n                previewElement.css('background-color', 'transparent');\r\n\r\n                if (!realColor && allowEmpty) {\r\n                    // Update the replaced elements background with icon indicating no color selection\r\n                    previewElement.addClass(\"sp-clear-display\");\r\n                }\r\n                else {\r\n                    var realHex = realColor.toHexString(),\r\n                        realRgb = realColor.toRgbString();\r\n\r\n                    // Update the replaced elements background color (with actual selected color)\r\n                    previewElement.css(\"background-color\", realRgb);\r\n\r\n                    if (opts.showAlpha) {\r\n                        var rgb = realColor.toRgb();\r\n                        rgb.a = 0;\r\n                        var realAlpha = Color.parse(rgb).toRgbString();\r\n                        var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                        if (browser.isIE) {\r\n                            alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                        }\r\n                        else {\r\n                            alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                            // Use current syntax gradient on unprefixed property.\r\n                            alphaSliderInner.css(\"background\",\r\n                                \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                        }\r\n                    }\r\n\r\n                    displayColor = realColor.toString(format);\r\n                }\r\n\r\n                // Update the text entry input as it changes happen\r\n                if (opts.showInput) {\r\n                    textInput.val(displayColor);\r\n                }\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                drawInitial();\r\n            }\r\n\r\n            function updateHelperLocations() {\r\n                var s = currentSaturation;\r\n                var v = currentValue;\r\n\r\n                if(allowEmpty && isEmpty) {\r\n                    //if selected color is empty, hide the helpers\r\n                    alphaSlideHelper.hide();\r\n                    slideHelper.hide();\r\n                    dragHelper.hide();\r\n                }\r\n                else {\r\n                    //make sure helpers are visible\r\n                    alphaSlideHelper.show();\r\n                    slideHelper.show();\r\n                    dragHelper.show();\r\n\r\n                    // Where to show the little circle in that displays your current selected color\r\n                    var dragX = s * dragWidth;\r\n                    var dragY = dragHeight - (v * dragHeight);\r\n                    dragX = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\r\n                    );\r\n                    dragY = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\r\n                    );\r\n                    dragHelper.css({\r\n                        \"top\": dragY + \"px\",\r\n                        \"left\": dragX + \"px\"\r\n                    });\r\n\r\n                    var alphaX = currentAlpha * alphaWidth;\r\n                    alphaSlideHelper.css({\r\n                        \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\r\n                    });\r\n\r\n                    // Where to show the bar that displays your current selected hue\r\n                    var slideY = (currentHue) * slideHeight;\r\n                    slideHelper.css({\r\n                        \"top\": (slideY - slideHelperHeight) + \"px\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            function updateOriginalInput(fireCallback) {\r\n                var color = get(),\r\n                    displayColor = '',\r\n                    hasChanged = !Color.equals(color, colorOnShow);\r\n\r\n                if (color) {\r\n                    displayColor = color.toString(currentPreferredFormat);\r\n                    // Update the selection palette with the current color\r\n                    addColorToSelectionPalette(color);\r\n                }\r\n\r\n                if (isInput) {\r\n                    boundElement.val(displayColor);\r\n                }\r\n\r\n                if (fireCallback && hasChanged) {\r\n                    callbacks.change(color);\r\n                    boundElement.trigger('change', [ color ]);\r\n                }\r\n            }\r\n\r\n            function reflow() {\r\n                if (!visible) {\r\n                    return; // Calculations would be useless and wouldn't be reliable anyways\r\n                }\r\n                dragWidth = dragger.width();\r\n                dragHeight = dragger.height();\r\n                dragHelperHeight = dragHelper.height();\r\n                slideWidth = slider.width();\r\n                slideHeight = slider.height();\r\n                slideHelperHeight = slideHelper.height();\r\n                alphaWidth = alphaSlider.width();\r\n                alphaSlideHelperWidth = alphaSlideHelper.width();\r\n\r\n                if (!flat) {\r\n                    container.css(\"position\", \"absolute\");\r\n                    if (opts.offset) {\r\n                        container.offset(opts.offset);\r\n                    } else {\r\n                        container.offset(popups.calcOffset(container[0], offsetElement[0]));\r\n                    }\r\n                }\r\n\r\n                updateHelperLocations();\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                boundElement.trigger('reflow.ColorPicker');\r\n            }\r\n\r\n            function destroy() {\r\n                boundElement.show();\r\n                offsetElement.off(\"click.ColorPicker touchstart.ColorPicker\");\r\n                container.remove();\r\n                replacer.remove();\r\n                pickers[spect.id] = null;\r\n            }\r\n\r\n            function option(optionName, optionValue) {\r\n                if (optionName === undefined) {\r\n                    return langx.mixin({}, opts);\r\n                }\r\n                if (optionValue === undefined) {\r\n                    return opts[optionName];\r\n                }\r\n\r\n                opts[optionName] = optionValue;\r\n\r\n                if (optionName === \"preferredFormat\") {\r\n                    currentPreferredFormat = opts.preferredFormat;\r\n                }\r\n                applyOptions();\r\n            }\r\n\r\n            function enable() {\r\n                disabled = false;\r\n                boundElement.attr(\"disabled\", false);\r\n                offsetElement.removeClass(\"sp-disabled\");\r\n            }\r\n\r\n            function disable() {\r\n                hide();\r\n                disabled = true;\r\n                boundElement.attr(\"disabled\", true);\r\n                offsetElement.addClass(\"sp-disabled\");\r\n            }\r\n\r\n            function setOffset(coord) {\r\n                opts.offset = coord;\r\n                reflow();\r\n            }\r\n\r\n            initialize();\r\n\r\n            langx.mixin(this, {\r\n                show: show,\r\n                hide: hide,\r\n                toggle: toggle,\r\n                reflow: reflow,\r\n                option: option,\r\n                enable: enable,\r\n                disable: disable,\r\n                offset: setOffset,\r\n                set: function (c) {\r\n                    set(c);\r\n                    updateOriginalInput();\r\n                },\r\n                get: get,\r\n                destroy: destroy,\r\n                container: container\r\n            });\r\n        }\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker,\"colorPicker\");\r\n\r\n    /**\r\n    * stopPropagation - makes the code only doing this a little easier to read in line\r\n    */\r\n    function stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n    * Create a function bound to a given object\r\n    * Thanks to underscore.js\r\n    */\r\n    function bind(func, obj) {\r\n        var slice = Array.prototype.slice;\r\n        var args = slice.call(arguments, 2);\r\n        return function () {\r\n            return func.apply(obj, args.concat(slice.call(arguments)));\r\n        };\r\n    }\r\n\r\n    ColorPicker.localization = { };\r\n    ColorPicker.palettes = { };\r\n\r\n\r\n    return skylark.attach(\"domx.ColorPicker\",ColorPicker);\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_ja',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n\r\n    return localization;\r\n});\ndefine('skylark-domx-colorpicker/i18n/texts_zh-cn',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_zh-tw',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\ndefine('skylark-domx-colorpicker/main',[\r\n    \"./ColorPicker\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function(ColorPicker) {\r\n    return ColorPicker;\r\n});\r\n\ndefine('skylark-domx-colorpicker', ['skylark-domx-colorpicker/main'], function (main) { return main; });\n\n"]}