{"version":3,"sources":["skylark-domx-colorpicker.js"],"names":["define","skylark","langx","browser","noder","eventer","finder","$","element","onmove","onstart","onstop","doc","document","dragging","offset","maxHeight","maxWidth","hasTouch","window","duringDragEvents","prevent","e","stopPropagation","preventDefault","returnValue","move","isIE","documentMode","button","stop","t0","originalEvent","touches","pageX","pageY","dragX","Math","max","min","left","dragY","top","apply","off","body","removeClass","setTimeout","arguments","on","which","height","width","addClass","styler","fx","plugins","popups","Color","draggable","noop","pickers","replaceInput","join","markup","gradientFix","i","paletteTemplate","p","color","className","opts","html","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","noColorSelectedText","ColorPicker","Plugin","inherit","klassName","pluginName","options","beforeShow","change","show","hide","flat","showInput","allowEmpty","showButtons","clickoutFiresChange","showInitial","showPalette","showPaletteOnly","hideAfterPaletteSelect","togglePaletteOnly","showSelectionPalette","localStorageKey","appendTo","maxSelectionSize","cancelText","chooseText","togglePaletteMoreText","togglePaletteLessText","clearText","containerClassName","replacerClassName","showAlpha","theme","palette","selectionPalette","disabled","_construct","elm","this","overrided","_elm","resize","debounce","reflow","visible","isDragging","dragWidth","dragHeight","dragHelperHeight","slideHeight","alphaWidth","alphaSlideHelperWidth","slideHelperHeight","currentHue","currentSaturation","currentValue","currentAlpha","paletteArray","paletteLookup","slice","draggingClass","shiftMovementDirection","callbacks","bind","ownerDocument","boundElement","container","pickerContainer","find","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","paletteContainer","initialColorContainer","cancelButton","clearButton","chooseButton","toggleButton","isInput","is","isInputTypeColor","inputTypeColorSupport","shouldReplace","replacer","offsetElement","previewElement","initialColor","val","colorOnShow","currentPreferredFormat","isEmpty","applyOptions","text","isArray","j","rgb","toggleClass","addColorToSelectionPalette","inArray","shift","drawPalette","currentColor","get","map","unique","reverse","getUniqueSelectionPalette","drawInitial","initial","dragStart","trigger","dragStop","setFromTextInput","value","isValid","set","updateOriginalInput","onkeydown","keyCode","clickout","revert","toggle","event","create","isDefaultPrevented","hideAll","updateUI","ignoreFormatChange","newColor","newHsv","toHsv","h","s","v","a","getFormat","round","updateHelperLocations","flatColor","css","toHexString","format","realColor","displayColor","realHex","realRgb","toRgb","realAlpha","gradient","toFilter","gradientType","alphaX","slideY","fireCallback","hasChanged","calcOffset","disable","after","parent","target","click","keydown","hasClass","outerWidth","shiftKey","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setValue","paletteElementClick","data","ignore","closest","paletteEvent","initialize","mixin","option","optionName","optionValue","undefined","enable","coord","destroy","remove","spect","id","func","obj","Array","prototype","args","call","concat","register","localization","palettes","attach","main"],"mappings":"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","file":"../skylark-domx-colorpicker.js","sourcesContent":["define('skylark-domx-colorpicker/draggable',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\"\r\n],function(skylark, langx, browser, noder, eventer,finder, $) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\treturn draggable;\r\n});\ndefine('skylark-domx-colorpicker/ColorPicker',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./draggable\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,draggable) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n\r\n        // IE7-10 does not support gradients with multiple stops, so we need to simulate\r\n        //  that for the rainbow slider with 8 divs that each have a single gradient\r\n        var gradientFix = \"\";\r\n        if (browser.isIE) {\r\n            for (var i = 1; i <= 6; i++) {\r\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\r\n            }\r\n        }\r\n\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                                gradientFix,\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    function hideAll() {\r\n        for (var i = 0; i < pickers.length; i++) {\r\n            if (pickers[i]) {\r\n                pickers[i].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"domx.colorPicker\",\r\n\r\n        options : {\r\n\r\n            // Callbacks\r\n            beforeShow: noop,\r\n            move: noop,\r\n            change: noop,\r\n            show: noop,\r\n            hide: noop,\r\n\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            showInput: false,\r\n            allowEmpty: false,\r\n            showButtons: true,\r\n            clickoutFiresChange: true,\r\n            showInitial: false,\r\n            showPalette: false,\r\n            showPaletteOnly: false,\r\n            hideAfterPaletteSelect: false,\r\n            togglePaletteOnly: false,\r\n            showSelectionPalette: true,\r\n            localStorageKey: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            cancelText: \"cancel\",\r\n            chooseText: \"choose\",\r\n            togglePaletteMoreText: \"more\",\r\n            togglePaletteLessText: \"less\",\r\n            clearText: \"Clear Color Selection\",\r\n            noColorSelectedText: \"No Color Selected\",\r\n            preferredFormat: false,\r\n            className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            showAlpha: false,\r\n            theme: \"sp-light\",\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: [],\r\n            disabled: false,\r\n            offset: null\r\n\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            var opts = this.options,\r\n                element = this._elm,\r\n                flat = opts.flat,\r\n                showSelectionPalette = opts.showSelectionPalette,\r\n                theme = opts.theme,\r\n                resize = langx.debounce(reflow, 10),\r\n                visible = false,\r\n                isDragging = false,\r\n                dragWidth = 0,\r\n                dragHeight = 0,\r\n                dragHelperHeight = 0,\r\n                slideHeight = 0,\r\n                slideWidth = 0,\r\n                alphaWidth = 0,\r\n                alphaSlideHelperWidth = 0,\r\n                slideHelperHeight = 0,\r\n                currentHue = 0,\r\n                currentSaturation = 0,\r\n                currentValue = 0,\r\n                currentAlpha = 1,\r\n                palette = [],\r\n                paletteArray = [],\r\n                paletteLookup = {},\r\n                selectionPalette = opts.selectionPalette.slice(0),\r\n                maxSelectionSize = opts.maxSelectionSize,\r\n                draggingClass = \"sp-dragging\",\r\n                shiftMovementDirection = null;\r\n\r\n\r\n            var callbacks = opts.callbacks = {\r\n                'move': bind(opts.move, elm),\r\n                'change': bind(opts.change, elm),\r\n                'show': bind(opts.show, elm),\r\n                'hide': bind(opts.hide, elm),\r\n                'beforeShow': bind(opts.beforeShow, elm)\r\n            };\r\n\r\n            var doc = element.ownerDocument,\r\n                body = doc.body,\r\n                boundElement = $(element),\r\n                disabled = false,\r\n                container = $(markup, doc).addClass(theme),\r\n                pickerContainer = container.find(\".sp-picker-container\"),\r\n                dragger = container.find(\".sp-color\"),\r\n                dragHelper = container.find(\".sp-dragger\"),\r\n                slider = container.find(\".sp-hue\"),\r\n                slideHelper = container.find(\".sp-slider\"),\r\n                alphaSliderInner = container.find(\".sp-alpha-inner\"),\r\n                alphaSlider = container.find(\".sp-alpha\"),\r\n                alphaSlideHelper = container.find(\".sp-alpha-handle\"),\r\n                textInput = container.find(\".sp-input\"),\r\n                paletteContainer = container.find(\".sp-palette\"),\r\n                initialColorContainer = container.find(\".sp-initial\"),\r\n                cancelButton = container.find(\".sp-cancel\"),\r\n                clearButton = container.find(\".sp-clear\"),\r\n                chooseButton = container.find(\".sp-choose\"),\r\n                toggleButton = container.find(\".sp-palette-toggle\"),\r\n                isInput = boundElement.is(\"input\"),\r\n                isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n                shouldReplace = isInput && !flat,\r\n                replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                offsetElement = (shouldReplace) ? replacer : boundElement,\r\n                previewElement = replacer.find(\".sp-preview-inner\"),\r\n                initialColor = opts.color || (isInput && boundElement.val()),\r\n                colorOnShow = false,\r\n                currentPreferredFormat = opts.preferredFormat,\r\n                clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\r\n                isEmpty = !initialColor,\r\n                allowEmpty = opts.allowEmpty && !isInputTypeColor;\r\n\r\n            function applyOptions() {\r\n\r\n                if (opts.showPaletteOnly) {\r\n                    opts.showPalette = true;\r\n                }\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n\r\n                if (opts.palette) {\r\n                    palette = opts.palette.slice(0);\r\n                    paletteArray = langx.isArray(palette[0]) ? palette : [palette];\r\n                    paletteLookup = {};\r\n                    for (var i = 0; i < paletteArray.length; i++) {\r\n                        for (var j = 0; j < paletteArray[i].length; j++) {\r\n                            var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                            paletteLookup[rgb] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                container.toggleClass(\"sp-flat\", flat);\r\n                container.toggleClass(\"sp-input-disabled\", !opts.showInput);\r\n                container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\r\n                container.toggleClass(\"sp-clear-enabled\", allowEmpty);\r\n                container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\r\n                container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\r\n                container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\r\n                container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\r\n                container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\r\n                container.addClass(opts.className).addClass(opts.containerClassName);\r\n\r\n                reflow();\r\n            }\r\n\r\n            function initialize() {\r\n\r\n                if (browser.isIE) {\r\n                    container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n                }\r\n\r\n                applyOptions();\r\n\r\n                if (shouldReplace) {\r\n                    boundElement.after(replacer).hide();\r\n                }\r\n\r\n                if (!allowEmpty) {\r\n                    clearButton.hide();\r\n                }\r\n\r\n                if (flat) {\r\n                    boundElement.after(container).hide();\r\n                }\r\n                else {\r\n\r\n                    var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\r\n                    if (appendTo.length !== 1) {\r\n                        appendTo = $(\"body\");\r\n                    }\r\n\r\n                    appendTo.append(container);\r\n                }\r\n\r\n                offsetElement.on(\"click.ColorPicker touchstart.ColorPicker\", function (e) {\r\n                    if (!disabled) {\r\n                        toggle();\r\n                    }\r\n\r\n                    e.stopPropagation();\r\n\r\n                    if (!$(e.target).is(\"input\")) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n\r\n                if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\r\n                    disable();\r\n                }\r\n\r\n                // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n                container.click(stopPropagation);\r\n\r\n                // Handle user typed input\r\n                textInput.change(setFromTextInput);\r\n                textInput.on(\"paste\", function () {\r\n                    setTimeout(setFromTextInput, 1);\r\n                });\r\n                textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n                cancelButton.text(opts.cancelText);\r\n                cancelButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    revert();\r\n                    hide();\r\n                });\r\n\r\n                clearButton.attr(\"title\", opts.clearText);\r\n                clearButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    isEmpty = true;\r\n                    move();\r\n\r\n                    if(flat) {\r\n                        //for the flat style, this is a change event\r\n                        updateOriginalInput(true);\r\n                    }\r\n                });\r\n\r\n                chooseButton.text(opts.chooseText);\r\n                chooseButton.on(\"click.ColorPicker\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    if (browser.isIE && textInput.is(\":focus\")) {\r\n                        textInput.trigger('change');\r\n                    }\r\n\r\n                    if (isValid()) {\r\n                        updateOriginalInput(true);\r\n                        hide();\r\n                    }\r\n                });\r\n\r\n                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n                toggleButton.on(\"click.spectrum\", function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n\r\n                    opts.showPaletteOnly = !opts.showPaletteOnly;\r\n\r\n                    // To make sure the Picker area is drawn on the right, next to the\r\n                    // Palette area (and not below the palette), first move the Palette\r\n                    // to the left to make space for the picker, plus 5px extra.\r\n                    // The 'applyOptions' function puts the whole container back into place\r\n                    // and takes care of the button-text and the sp-palette-only CSS class.\r\n                    if (!opts.showPaletteOnly && !flat) {\r\n                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\r\n                    }\r\n                    applyOptions();\r\n                });\r\n\r\n                draggable(alphaSlider, function (dragX, dragY, e) {\r\n                    currentAlpha = (dragX / alphaWidth);\r\n                    isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        currentAlpha = Math.round(currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, dragStart, dragStop);\r\n\r\n                draggable(slider, function (dragX, dragY) {\r\n                    currentHue = parseFloat(dragY / slideHeight);\r\n                    isEmpty = false;\r\n                    if (!opts.showAlpha) {\r\n                        currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, dragStart, dragStop);\r\n\r\n                draggable(dragger, function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        shiftMovementDirection = null;\r\n                    }\r\n                    else if (!shiftMovementDirection) {\r\n                        var oldDragX = currentSaturation * dragWidth;\r\n                        var oldDragY = dragHeight - (currentValue * dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\r\n                    var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        currentSaturation = parseFloat(dragX / dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        currentValue = parseFloat((dragHeight - dragY) / dragHeight);\r\n                    }\r\n\r\n                    isEmpty = false;\r\n                    if (!opts.showAlpha) {\r\n                        currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n\r\n                }, dragStart, dragStop);\r\n\r\n                if (!!initialColor) {\r\n                    set(initialColor);\r\n\r\n                    // In case color was black - update the preview UI and set the format\r\n                    // since the set function will not run (default color is black).\r\n                    updateUI();\r\n                    currentPreferredFormat = opts.preferredFormat || Color.parse(initialColor).format;\r\n\r\n                    addColorToSelectionPalette(initialColor);\r\n                }\r\n                else {\r\n                    updateUI();\r\n                }\r\n\r\n                if (flat) {\r\n                    show();\r\n                }\r\n\r\n                function paletteElementClick(e) {\r\n                    if (e.data && e.data.ignore) {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n                    }\r\n                    else {\r\n                        set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                        move();\r\n\r\n                        // If the picker is going to close immediately, a palette selection\r\n                        // is a change.  Otherwise, it's a move only.\r\n                        if (opts.hideAfterPaletteSelect) {\r\n                            updateOriginalInput(true);\r\n                            hide();\r\n                        } else {\r\n                            updateOriginalInput();\r\n                        }\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n                paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n                initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n            }\r\n\r\n\r\n            function addColorToSelectionPalette(color) {\r\n                if (showSelectionPalette) {\r\n                    var rgb = Color.parse(color).toRgbString();\r\n                    if (!paletteLookup[rgb] && langx.inArray(rgb, selectionPalette) === -1) {\r\n                        selectionPalette.push(rgb);\r\n                        while(selectionPalette.length > maxSelectionSize) {\r\n                            selectionPalette.shift();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getUniqueSelectionPalette() {\r\n                var unique = [];\r\n                if (opts.showPalette) {\r\n                    for (var i = 0; i < selectionPalette.length; i++) {\r\n                        var rgb = Color.parse(selectionPalette[i]).toRgbString();\r\n\r\n                        if (!paletteLookup[rgb]) {\r\n                            unique.push(selectionPalette[i]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return unique.reverse().slice(0, opts.maxSelectionSize);\r\n            }\r\n\r\n            function drawPalette() {\r\n\r\n                var currentColor = get();\r\n\r\n                var html = langx.map(paletteArray, function (palette, i) {\r\n                    return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n                });\r\n\r\n                if (selectionPalette) {\r\n                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n                }\r\n\r\n                paletteContainer.html(html.join(\"\"));\r\n            }\r\n\r\n            function drawInitial() {\r\n                if (opts.showInitial) {\r\n                    var initial = colorOnShow;\r\n                    var current = get();\r\n                    initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n                }\r\n            }\r\n\r\n            function dragStart() {\r\n                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\r\n                    reflow();\r\n                }\r\n                isDragging = true;\r\n                container.addClass(draggingClass);\r\n                shiftMovementDirection = null;\r\n                boundElement.trigger('dragstart.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                isDragging = false;\r\n                container.removeClass(draggingClass);\r\n                boundElement.trigger('dragstop.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function setFromTextInput() {\r\n\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && allowEmpty) {\r\n                    set(null);\r\n                    move();\r\n                    updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        set(tiny);\r\n                        move();\r\n                        updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            function onkeydown(e) {\r\n                // Close on ESC\r\n                if (e.keyCode === 27) {\r\n                    hide();\r\n                }\r\n            }\r\n\r\n            function clickout(e) {\r\n                // Return on right click.\r\n                if (e.button == 2) { return; }\r\n\r\n                // If a drag event was happening during the mouseup, don't hide\r\n                // on click.\r\n                if (isDragging) { return; }\r\n\r\n                if (clickoutFiresChange) {\r\n                    updateOriginalInput(true);\r\n                }\r\n                else {\r\n                    revert();\r\n                }\r\n                hide();\r\n            }\r\n\r\n            function toggle() {\r\n                if (visible) {\r\n                    hide();\r\n                }\r\n                else {\r\n                    show();\r\n                }\r\n            }\r\n\r\n            function show() {\r\n                var event = eventer.create('beforeShow.ColorPicker');\r\n\r\n                if (visible) {\r\n                    reflow();\r\n                    return;\r\n                }\r\n\r\n                boundElement.trigger(event, [ get() ]);\r\n\r\n                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                hideAll();\r\n                visible = true;\r\n\r\n                $(doc).on(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).on(\"click.ColorPicker\", clickout);\r\n                $(window).on(\"resize.ColorPicker\", resize);\r\n                replacer.addClass(\"sp-active\");\r\n                container.removeClass(\"sp-hidden\");\r\n\r\n                reflow();\r\n                updateUI();\r\n\r\n                colorOnShow = get();\r\n\r\n                drawInitial();\r\n                callbacks.show(colorOnShow);\r\n                boundElement.trigger('show.ColorPicker', [ colorOnShow ]);\r\n            }\r\n            function hide() {\r\n                // Return if hiding is unnecessary\r\n                if (!visible || flat) { return; }\r\n                visible = false;\r\n\r\n                $(doc).off(\"keydown.ColorPicker\", onkeydown);\r\n                $(doc).off(\"click.ColorPicker\", clickout);\r\n                $(window).off(\"resize.ColorPicker\", resize);\r\n\r\n                replacer.removeClass(\"sp-active\");\r\n                container.addClass(\"sp-hidden\");\r\n\r\n                callbacks.hide(get());\r\n                boundElement.trigger('hide.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function revert() {\r\n                set(colorOnShow, true);\r\n                updateOriginalInput(true);\r\n            }\r\n\r\n            function set(color, ignoreFormatChange) {\r\n                if (Color.equals(color, get())) {\r\n                    // Update UI just in case a validation error needs\r\n                    // to be cleared.\r\n                    updateUI();\r\n                    return;\r\n                }\r\n\r\n                var newColor, newHsv;\r\n                if (!color && allowEmpty) {\r\n                    isEmpty = true;\r\n                } else {\r\n                    isEmpty = false;\r\n                    newColor = Color.parse(color);\r\n                    newHsv = newColor.toHsv();\r\n\r\n                    currentHue = (newHsv.h % 360) / 360;\r\n                    currentSaturation = newHsv.s;\r\n                    currentValue = newHsv.v;\r\n                    currentAlpha = newHsv.a;\r\n                }\r\n                updateUI();\r\n\r\n                if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n                }\r\n            }\r\n\r\n            function get(opts) {\r\n                opts = opts || { };\r\n\r\n                if (allowEmpty && isEmpty) {\r\n                    return null;\r\n                }\r\n\r\n\r\n                /*\r\n                return fromRatio({\r\n                    h: currentHue,\r\n                    s: currentSaturation,\r\n                    v: currentValue,\r\n                    a: Math.round(currentAlpha * 1000) / 1000\r\n                }, { format: opts.format || currentPreferredFormat });\r\n                */\r\n                return Color.parse({\r\n                    h: currentHue * 360,\r\n                    s: currentSaturation,\r\n                    v: currentValue,\r\n                    a: Math.round(currentAlpha * 1000) / 1000\r\n                });\r\n            }\r\n\r\n            function isValid() {\r\n                return !textInput.hasClass(\"sp-validation-error\");\r\n            }\r\n\r\n            function move() {\r\n                updateUI();\r\n\r\n                callbacks.move(get());\r\n                boundElement.trigger('move.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function updateUI() {\r\n\r\n                textInput.removeClass(\"sp-validation-error\");\r\n\r\n                updateHelperLocations();\r\n\r\n                // Update dragger background color (gradients take care of saturation and value).\r\n                //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n                var flatColor = Color.parse({ \r\n                    h: currentHue * 360, \r\n                    s: 1, \r\n                    v: 1 \r\n                });\r\n                dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n                // Get a format that alpha will be included in (hex and names ignore alpha)\r\n                var format = currentPreferredFormat;\r\n                if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\r\n                    if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                        format = \"rgb\";\r\n                    }\r\n                }\r\n\r\n                var realColor = get({ format: format }),\r\n                    displayColor = '';\r\n\r\n                 //reset background info for preview element\r\n                previewElement.removeClass(\"sp-clear-display\");\r\n                previewElement.css('background-color', 'transparent');\r\n\r\n                if (!realColor && allowEmpty) {\r\n                    // Update the replaced elements background with icon indicating no color selection\r\n                    previewElement.addClass(\"sp-clear-display\");\r\n                }\r\n                else {\r\n                    var realHex = realColor.toHexString(),\r\n                        realRgb = realColor.toRgbString();\r\n\r\n                    // Update the replaced elements background color (with actual selected color)\r\n                    previewElement.css(\"background-color\", realRgb);\r\n\r\n                    if (opts.showAlpha) {\r\n                        var rgb = realColor.toRgb();\r\n                        rgb.a = 0;\r\n                        var realAlpha = Color.parse(rgb).toRgbString();\r\n                        var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                        if (browser.isIE) {\r\n                            alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                        }\r\n                        else {\r\n                            alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                            alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                            // Use current syntax gradient on unprefixed property.\r\n                            alphaSliderInner.css(\"background\",\r\n                                \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                        }\r\n                    }\r\n\r\n                    displayColor = realColor.toString(format);\r\n                }\r\n\r\n                // Update the text entry input as it changes happen\r\n                if (opts.showInput) {\r\n                    textInput.val(displayColor);\r\n                }\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                drawInitial();\r\n            }\r\n\r\n            function updateHelperLocations() {\r\n                var s = currentSaturation;\r\n                var v = currentValue;\r\n\r\n                if(allowEmpty && isEmpty) {\r\n                    //if selected color is empty, hide the helpers\r\n                    alphaSlideHelper.hide();\r\n                    slideHelper.hide();\r\n                    dragHelper.hide();\r\n                }\r\n                else {\r\n                    //make sure helpers are visible\r\n                    alphaSlideHelper.show();\r\n                    slideHelper.show();\r\n                    dragHelper.show();\r\n\r\n                    // Where to show the little circle in that displays your current selected color\r\n                    var dragX = s * dragWidth;\r\n                    var dragY = dragHeight - (v * dragHeight);\r\n                    dragX = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\r\n                    );\r\n                    dragY = Math.max(\r\n                        -dragHelperHeight,\r\n                        Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\r\n                    );\r\n                    dragHelper.css({\r\n                        \"top\": dragY + \"px\",\r\n                        \"left\": dragX + \"px\"\r\n                    });\r\n\r\n                    var alphaX = currentAlpha * alphaWidth;\r\n                    alphaSlideHelper.css({\r\n                        \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\r\n                    });\r\n\r\n                    // Where to show the bar that displays your current selected hue\r\n                    var slideY = (currentHue) * slideHeight;\r\n                    slideHelper.css({\r\n                        \"top\": (slideY - slideHelperHeight) + \"px\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            function updateOriginalInput(fireCallback) {\r\n                var color = get(),\r\n                    displayColor = '',\r\n                    hasChanged = !Color.equals(color, colorOnShow);\r\n\r\n                if (color) {\r\n                    displayColor = color.toString(currentPreferredFormat);\r\n                    // Update the selection palette with the current color\r\n                    addColorToSelectionPalette(color);\r\n                }\r\n\r\n                if (isInput) {\r\n                    boundElement.val(displayColor);\r\n                }\r\n\r\n                if (fireCallback && hasChanged) {\r\n                    callbacks.change(color);\r\n                    boundElement.trigger('change', [ color ]);\r\n                }\r\n            }\r\n\r\n            function reflow() {\r\n                if (!visible) {\r\n                    return; // Calculations would be useless and wouldn't be reliable anyways\r\n                }\r\n                dragWidth = dragger.width();\r\n                dragHeight = dragger.height();\r\n                dragHelperHeight = dragHelper.height();\r\n                slideWidth = slider.width();\r\n                slideHeight = slider.height();\r\n                slideHelperHeight = slideHelper.height();\r\n                alphaWidth = alphaSlider.width();\r\n                alphaSlideHelperWidth = alphaSlideHelper.width();\r\n\r\n                if (!flat) {\r\n                    container.css(\"position\", \"absolute\");\r\n                    if (opts.offset) {\r\n                        container.offset(opts.offset);\r\n                    } else {\r\n                        container.offset(popups.calcOffset(container[0], offsetElement[0]));\r\n                    }\r\n                }\r\n\r\n                updateHelperLocations();\r\n\r\n                if (opts.showPalette) {\r\n                    drawPalette();\r\n                }\r\n\r\n                boundElement.trigger('reflow.ColorPicker');\r\n            }\r\n\r\n            function destroy() {\r\n                boundElement.show();\r\n                offsetElement.off(\"click.ColorPicker touchstart.ColorPicker\");\r\n                container.remove();\r\n                replacer.remove();\r\n                pickers[spect.id] = null;\r\n            }\r\n\r\n            function option(optionName, optionValue) {\r\n                if (optionName === undefined) {\r\n                    return langx.mixin({}, opts);\r\n                }\r\n                if (optionValue === undefined) {\r\n                    return opts[optionName];\r\n                }\r\n\r\n                opts[optionName] = optionValue;\r\n\r\n                if (optionName === \"preferredFormat\") {\r\n                    currentPreferredFormat = opts.preferredFormat;\r\n                }\r\n                applyOptions();\r\n            }\r\n\r\n            function enable() {\r\n                disabled = false;\r\n                boundElement.attr(\"disabled\", false);\r\n                offsetElement.removeClass(\"sp-disabled\");\r\n            }\r\n\r\n            function disable() {\r\n                hide();\r\n                disabled = true;\r\n                boundElement.attr(\"disabled\", true);\r\n                offsetElement.addClass(\"sp-disabled\");\r\n            }\r\n\r\n            function setOffset(coord) {\r\n                opts.offset = coord;\r\n                reflow();\r\n            }\r\n\r\n            initialize();\r\n\r\n            langx.mixin(this, {\r\n                show: show,\r\n                hide: hide,\r\n                toggle: toggle,\r\n                reflow: reflow,\r\n                option: option,\r\n                enable: enable,\r\n                disable: disable,\r\n                offset: setOffset,\r\n                set: function (c) {\r\n                    set(c);\r\n                    updateOriginalInput();\r\n                },\r\n                get: get,\r\n                destroy: destroy,\r\n                container: container\r\n            });\r\n        }\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker,\"colorPicker\");\r\n\r\n    /**\r\n    * stopPropagation - makes the code only doing this a little easier to read in line\r\n    */\r\n    function stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n    * Create a function bound to a given object\r\n    * Thanks to underscore.js\r\n    */\r\n    function bind(func, obj) {\r\n        var slice = Array.prototype.slice;\r\n        var args = slice.call(arguments, 2);\r\n        return function () {\r\n            return func.apply(obj, args.concat(slice.call(arguments)));\r\n        };\r\n    }\r\n\r\n\r\n    ColorPicker.draggable = draggable;\r\n\r\n    ColorPicker.localization = { };\r\n    ColorPicker.palettes = { };\r\n\r\n\r\n    return skylark.attach(\"domx.ColorPicker\",ColorPicker);\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_ja',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n\r\n    return localization;\r\n});\ndefine('skylark-domx-colorpicker/i18n/texts_zh-cn',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\r\n\ndefine('skylark-domx-colorpicker/i18n/texts_zh-tw',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\ndefine('skylark-domx-colorpicker/main',[\r\n    \"./ColorPicker\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function(ColorPicker) {\r\n    return ColorPicker;\r\n});\r\n\ndefine('skylark-domx-colorpicker', ['skylark-domx-colorpicker/main'], function (main) { return main; });\n\n"]}