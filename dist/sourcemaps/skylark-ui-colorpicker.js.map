{"version":3,"sources":["skylark-ui-colorpicker.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","skylarkjs","skylark","langx","browser","noder","eventer","finder","$","colors","Color","ui","Widget","paletteTemplate","p","color","className","opts","html","current","tiny","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","cls","append","attr","noColorSelectedText","hideAll","pickers","hide","instanceOptions","o","callbackContext","mixin","defaultOpts","callbacks","move","bind","change","show","beforeShow","init","element","applyOptions","showPaletteOnly","showPalette","toggleButton","text","togglePaletteMoreText","togglePaletteLessText","palette","slice","paletteArray","isArray","paletteLookup","j","rgb","container","toggleClass","flat","showInput","showAlpha","allowEmpty","showButtons","togglePaletteOnly","showInitial","addClass","containerClassName","reflow","initialize","paletteElementClick","e","data","ignore","set","target","closest","hideAfterPaletteSelect","updateOriginalInput","isIE","find","shouldReplace","boundElement","after","replacer","clearButton","appendTo","parent","updateSelectionPaletteFromStorage","offsetElement","on","disabled","toggle","stopPropagation","is","preventDefault","disable","click","textInput","setFromTextInput","setTimeout","keydown","keyCode","cancelButton","cancelText","revert","clearText","isEmpty","chooseButton","chooseText","trigger","isValid","css","pickerContainer","outerWidth","draggable","alphaSlider","dragX","dragY","currentAlpha","alphaWidth","shiftKey","Math","round","dragStart","dragStop","slider","currentHue","parseFloat","slideHeight","dragger","shiftMovementDirection","oldDragX","currentSaturation","dragWidth","oldDragY","dragHeight","currentValue","furtherFromX","abs","setSaturation","setValue","initialColor","updateUI","currentPreferredFormat","format","addColorToSelectionPalette","paletteEvent","paletteContainer","initialColorContainer","localStorageKey","window","localStorage","oldPalette","each","selectionPalette","showSelectionPalette","inArray","maxSelectionSize","shift","getUniqueSelectionPalette","unique","reverse","drawPalette","currentColor","get","drawInitial","initial","colorOnShow","isDragging","draggingClass","removeClass","value","val","visible","event","create","isDefaultPrevented","doc","onkeydown","clickout","resize","button","clickoutFiresChange","off","ignoreFormatChange","newColor","newHsv","toHsv","h","s","v","a","getFormat","fromRatio","hasClass","updateHelperLocations","flatColor","toHexString","realColor","displayColor","previewElement","realHex","realRgb","toRgb","realAlpha","gradient","alphaSliderInner","toFilter","gradientType","alphaSlideHelper","slideHelper","dragHelper","max","dragHelperHeight","min","top","left","alphaX","alphaSlideHelperWidth","slideY","slideHelperHeight","fireCallback","hasChanged","isInput","width","height","slideWidth","offset","getOffset","destroy","remove","spect","option","optionName","optionValue","undefined","enable","setOffset","coord","theme","debounce","ownerDocument","body","markup","isInputTypeColor","inputTypeColorSupport","replaceInput","replacerClassName","picker","input","extraY","dpWidth","dpHeight","outerHeight","inputHeight","docElem","documentElement","viewWidth","clientWidth","scrollLeft","viewHeight","clientHeight","scrollTop","offsetLeft","offsetTop","bottom","right","func","obj","Array","prototype","call","arguments","concat","onmove","onstart","onstop","prevent","returnValue","dragging","documentMode","stop","t0","originalEvent","touches","pageX","pageY","maxWidth","maxHeight","hasTouch","start","rightclick","which","duringDragEvents","document","Plugin","extra","this","dataID","method","removeData","colorPicker","options","ColorPicker","noop","gradientFix","Evented","inherit","klassName","load","loadOpts","defaults","localization","palettes","fn","main"],"mappings":"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","file":"../skylark-ui-colorpicker.js","sourcesContent":["define('skylark-ui-colorpicker/ColorPicker',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/query\",\r\n    \"skylark-utils-color/colors\",\r\n    \"skylark-utils-color/Color\",\r\n    \"skylark-ui-swt/ui\",\r\n    \"skylark-ui-swt/Widget\"\r\n],function(skylark, langx, browser, noder, eventer,finder, $, colors, Color, ui, Widget) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n    // Spectrum Colorpicker v1.8.0\r\n    // https://github.com/bgrins/spectrum\r\n    // Author: Brian Grinstead\r\n    // License: MIT\r\n\r\n\r\n    var defaultOpts = {\r\n\r\n        // Callbacks\r\n        beforeShow: noop,\r\n        move: noop,\r\n        change: noop,\r\n        show: noop,\r\n        hide: noop,\r\n\r\n        // Options\r\n        color: false,\r\n        flat: false,\r\n        showInput: false,\r\n        allowEmpty: false,\r\n        showButtons: true,\r\n        clickoutFiresChange: true,\r\n        showInitial: false,\r\n        showPalette: false,\r\n        showPaletteOnly: false,\r\n        hideAfterPaletteSelect: false,\r\n        togglePaletteOnly: false,\r\n        showSelectionPalette: true,\r\n        localStorageKey: false,\r\n        appendTo: \"body\",\r\n        maxSelectionSize: 7,\r\n        cancelText: \"cancel\",\r\n        chooseText: \"choose\",\r\n        togglePaletteMoreText: \"more\",\r\n        togglePaletteLessText: \"less\",\r\n        clearText: \"Clear Color Selection\",\r\n        noColorSelectedText: \"No Color Selected\",\r\n        preferredFormat: false,\r\n        className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\r\n        containerClassName: \"\",\r\n        replacerClassName: \"\",\r\n        showAlpha: false,\r\n        theme: \"sp-light\",\r\n        palette: [[\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]],\r\n        selectionPalette: [],\r\n        disabled: false,\r\n        offset: null\r\n    },\r\n    pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    markup = (function () {\r\n\r\n        // IE7-10 does not support gradients with multiple stops, so we need to simulate\r\n        //  that for the rainbow slider with 8 divs that each have a single gradient\r\n        var gradientFix = \"\";\r\n        if (browser.isIE) {\r\n            for (var i = 1; i <= 6; i++) {\r\n                gradientFix += \"<div class='sp-\" + i + \"'></div>\";\r\n            }\r\n        }\r\n\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                                gradientFix,\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = colors.Color(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    function hideAll() {\r\n        for (var i = 0; i < pickers.length; i++) {\r\n            if (pickers[i]) {\r\n                pickers[i].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    function instanceOptions(o, callbackContext) {\r\n        var opts = langx.mixin({}, defaultOpts, o);\r\n        opts.callbacks = {\r\n            'move': bind(opts.move, callbackContext),\r\n            'change': bind(opts.change, callbackContext),\r\n            'show': bind(opts.show, callbackContext),\r\n            'hide': bind(opts.hide, callbackContext),\r\n            'beforeShow': bind(opts.beforeShow, callbackContext)\r\n        };\r\n\r\n        return opts;\r\n    }\r\n\r\n    function init(element, o) {\r\n\r\n        var opts = instanceOptions(o, element),\r\n            flat = opts.flat,\r\n            showSelectionPalette = opts.showSelectionPalette,\r\n            localStorageKey = opts.localStorageKey,\r\n            theme = opts.theme,\r\n            callbacks = opts.callbacks,\r\n            resize = langx.debounce(reflow, 10),\r\n            visible = false,\r\n            isDragging = false,\r\n            dragWidth = 0,\r\n            dragHeight = 0,\r\n            dragHelperHeight = 0,\r\n            slideHeight = 0,\r\n            slideWidth = 0,\r\n            alphaWidth = 0,\r\n            alphaSlideHelperWidth = 0,\r\n            slideHelperHeight = 0,\r\n            currentHue = 0,\r\n            currentSaturation = 0,\r\n            currentValue = 0,\r\n            currentAlpha = 1,\r\n            palette = [],\r\n            paletteArray = [],\r\n            paletteLookup = {},\r\n            selectionPalette = opts.selectionPalette.slice(0),\r\n            maxSelectionSize = opts.maxSelectionSize,\r\n            draggingClass = \"sp-dragging\",\r\n            shiftMovementDirection = null;\r\n\r\n        var doc = element.ownerDocument,\r\n            body = doc.body,\r\n            boundElement = $(element),\r\n            disabled = false,\r\n            container = $(markup, doc).addClass(theme),\r\n            pickerContainer = container.find(\".sp-picker-container\"),\r\n            dragger = container.find(\".sp-color\"),\r\n            dragHelper = container.find(\".sp-dragger\"),\r\n            slider = container.find(\".sp-hue\"),\r\n            slideHelper = container.find(\".sp-slider\"),\r\n            alphaSliderInner = container.find(\".sp-alpha-inner\"),\r\n            alphaSlider = container.find(\".sp-alpha\"),\r\n            alphaSlideHelper = container.find(\".sp-alpha-handle\"),\r\n            textInput = container.find(\".sp-input\"),\r\n            paletteContainer = container.find(\".sp-palette\"),\r\n            initialColorContainer = container.find(\".sp-initial\"),\r\n            cancelButton = container.find(\".sp-cancel\"),\r\n            clearButton = container.find(\".sp-clear\"),\r\n            chooseButton = container.find(\".sp-choose\"),\r\n            toggleButton = container.find(\".sp-palette-toggle\"),\r\n            isInput = boundElement.is(\"input\"),\r\n            isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n            shouldReplace = isInput && !flat,\r\n            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n            offsetElement = (shouldReplace) ? replacer : boundElement,\r\n            previewElement = replacer.find(\".sp-preview-inner\"),\r\n            initialColor = opts.color || (isInput && boundElement.val()),\r\n            colorOnShow = false,\r\n            currentPreferredFormat = opts.preferredFormat,\r\n            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\r\n            isEmpty = !initialColor,\r\n            allowEmpty = opts.allowEmpty && !isInputTypeColor;\r\n\r\n        function applyOptions() {\r\n\r\n            if (opts.showPaletteOnly) {\r\n                opts.showPalette = true;\r\n            }\r\n\r\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n\r\n            if (opts.palette) {\r\n                palette = opts.palette.slice(0);\r\n                paletteArray = langx.isArray(palette[0]) ? palette : [palette];\r\n                paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            container.toggleClass(\"sp-flat\", flat);\r\n            container.toggleClass(\"sp-input-disabled\", !opts.showInput);\r\n            container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\r\n            container.toggleClass(\"sp-clear-enabled\", allowEmpty);\r\n            container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\r\n            container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\r\n            container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\r\n            container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\r\n            container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\r\n            container.addClass(opts.className).addClass(opts.containerClassName);\r\n\r\n            reflow();\r\n        }\r\n\r\n        function initialize() {\r\n\r\n            if (browser.isIE) {\r\n                container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            applyOptions();\r\n\r\n            if (shouldReplace) {\r\n                boundElement.after(replacer).hide();\r\n            }\r\n\r\n            if (!allowEmpty) {\r\n                clearButton.hide();\r\n            }\r\n\r\n            if (flat) {\r\n                boundElement.after(container).hide();\r\n            }\r\n            else {\r\n\r\n                var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\r\n                if (appendTo.length !== 1) {\r\n                    appendTo = $(\"body\");\r\n                }\r\n\r\n                appendTo.append(container);\r\n            }\r\n\r\n            updateSelectionPaletteFromStorage();\r\n\r\n            offsetElement.on(\"click.ColorPicker touchstart.ColorPicker\", function (e) {\r\n                if (!disabled) {\r\n                    toggle();\r\n                }\r\n\r\n                e.stopPropagation();\r\n\r\n                if (!$(e.target).is(\"input\")) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n\r\n            if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\r\n                disable();\r\n            }\r\n\r\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n            container.click(stopPropagation);\r\n\r\n            // Handle user typed input\r\n            textInput.change(setFromTextInput);\r\n            textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            cancelButton.text(opts.cancelText);\r\n            cancelButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                revert();\r\n                hide();\r\n            });\r\n\r\n            clearButton.attr(\"title\", opts.clearText);\r\n            clearButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                isEmpty = true;\r\n                move();\r\n\r\n                if(flat) {\r\n                    //for the flat style, this is a change event\r\n                    updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            chooseButton.text(opts.chooseText);\r\n            chooseButton.on(\"click.ColorPicker\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n\r\n                if (browser.isIE && textInput.is(\":focus\")) {\r\n                    textInput.trigger('change');\r\n                }\r\n\r\n                if (isValid()) {\r\n                    updateOriginalInput(true);\r\n                    hide();\r\n                }\r\n            });\r\n\r\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\r\n            toggleButton.on(\"click.spectrum\", function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n\r\n                opts.showPaletteOnly = !opts.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                if (!opts.showPaletteOnly && !flat) {\r\n                    container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                applyOptions();\r\n            });\r\n\r\n            draggable(alphaSlider, function (dragX, dragY, e) {\r\n                currentAlpha = (dragX / alphaWidth);\r\n                isEmpty = false;\r\n                if (e.shiftKey) {\r\n                    currentAlpha = Math.round(currentAlpha * 10) / 10;\r\n                }\r\n\r\n                move();\r\n            }, dragStart, dragStop);\r\n\r\n            draggable(slider, function (dragX, dragY) {\r\n                currentHue = parseFloat(dragY / slideHeight);\r\n                isEmpty = false;\r\n                if (!opts.showAlpha) {\r\n                    currentAlpha = 1;\r\n                }\r\n                move();\r\n            }, dragStart, dragStop);\r\n\r\n            draggable(dragger, function (dragX, dragY, e) {\r\n\r\n                // shift+drag should snap the movement to either the x or y axis.\r\n                if (!e.shiftKey) {\r\n                    shiftMovementDirection = null;\r\n                }\r\n                else if (!shiftMovementDirection) {\r\n                    var oldDragX = currentSaturation * dragWidth;\r\n                    var oldDragY = dragHeight - (currentValue * dragHeight);\r\n                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                    shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                }\r\n\r\n                var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\r\n                var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\r\n\r\n                if (setSaturation) {\r\n                    currentSaturation = parseFloat(dragX / dragWidth);\r\n                }\r\n                if (setValue) {\r\n                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\r\n                }\r\n\r\n                isEmpty = false;\r\n                if (!opts.showAlpha) {\r\n                    currentAlpha = 1;\r\n                }\r\n\r\n                move();\r\n\r\n            }, dragStart, dragStop);\r\n\r\n            if (!!initialColor) {\r\n                set(initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                updateUI();\r\n                currentPreferredFormat = opts.preferredFormat || Color(initialColor).format;\r\n\r\n                addColorToSelectionPalette(initialColor);\r\n            }\r\n            else {\r\n                updateUI();\r\n            }\r\n\r\n            if (flat) {\r\n                show();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        updateOriginalInput(true);\r\n                        hide();\r\n                    } else {\r\n                        updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n            initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        }\r\n\r\n        function updateSelectionPaletteFromStorage() {\r\n\r\n            if (localStorageKey && window.localStorage) {\r\n\r\n                // Migrate old palettes over to new format.  May want to remove this eventually.\r\n                try {\r\n                    var oldPalette = window.localStorage[localStorageKey].split(\",#\");\r\n                    if (oldPalette.length > 1) {\r\n                        delete window.localStorage[localStorageKey];\r\n                        langx.each(oldPalette, function(i, c) {\r\n                             addColorToSelectionPalette(c);\r\n                        });\r\n                    }\r\n                }\r\n                catch(e) { }\r\n\r\n                try {\r\n                    selectionPalette = window.localStorage[localStorageKey].split(\";\");\r\n                }\r\n                catch (e) { }\r\n            }\r\n        }\r\n\r\n        function addColorToSelectionPalette(color) {\r\n            if (showSelectionPalette) {\r\n                var rgb = Color(color).toRgbString();\r\n                if (!paletteLookup[rgb] && langx.inArray(rgb, selectionPalette) === -1) {\r\n                    selectionPalette.push(rgb);\r\n                    while(selectionPalette.length > maxSelectionSize) {\r\n                        selectionPalette.shift();\r\n                    }\r\n                }\r\n\r\n                if (localStorageKey && window.localStorage) {\r\n                    try {\r\n                        window.localStorage[localStorageKey] = selectionPalette.join(\";\");\r\n                    }\r\n                    catch(e) { }\r\n                }\r\n            }\r\n        }\r\n\r\n        function getUniqueSelectionPalette() {\r\n            var unique = [];\r\n            if (opts.showPalette) {\r\n                for (var i = 0; i < selectionPalette.length; i++) {\r\n                    var rgb = Color(selectionPalette[i]).toRgbString();\r\n\r\n                    if (!paletteLookup[rgb]) {\r\n                        unique.push(selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        }\r\n\r\n        function drawPalette() {\r\n\r\n            var currentColor = get();\r\n\r\n            var html = langx.map(paletteArray, function (palette, i) {\r\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            updateSelectionPaletteFromStorage();\r\n\r\n            if (selectionPalette) {\r\n                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            paletteContainer.html(html.join(\"\"));\r\n        }\r\n\r\n        function drawInitial() {\r\n            if (opts.showInitial) {\r\n                var initial = colorOnShow;\r\n                var current = get();\r\n                initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n            }\r\n        }\r\n\r\n        function dragStart() {\r\n            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\r\n                reflow();\r\n            }\r\n            isDragging = true;\r\n            container.addClass(draggingClass);\r\n            shiftMovementDirection = null;\r\n            boundElement.trigger('dragstart.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function dragStop() {\r\n            isDragging = false;\r\n            container.removeClass(draggingClass);\r\n            boundElement.trigger('dragstop.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function setFromTextInput() {\r\n\r\n            var value = textInput.val();\r\n\r\n            if ((value === null || value === \"\") && allowEmpty) {\r\n                set(null);\r\n                move();\r\n                updateOriginalInput();\r\n            }\r\n            else {\r\n                var tiny = Color(value);\r\n                if (tiny.isValid()) {\r\n                    set(tiny);\r\n                    move();\r\n                    updateOriginalInput();\r\n                }\r\n                else {\r\n                    textInput.addClass(\"sp-validation-error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        function toggle() {\r\n            if (visible) {\r\n                hide();\r\n            }\r\n            else {\r\n                show();\r\n            }\r\n        }\r\n\r\n        function show() {\r\n            var event = eventer.create('beforeShow.ColorPicker');\r\n\r\n            if (visible) {\r\n                reflow();\r\n                return;\r\n            }\r\n\r\n            boundElement.trigger(event, [ get() ]);\r\n\r\n            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            hideAll();\r\n            visible = true;\r\n\r\n            $(doc).on(\"keydown.ColorPicker\", onkeydown);\r\n            $(doc).on(\"click.ColorPicker\", clickout);\r\n            $(window).on(\"resize.ColorPicker\", resize);\r\n            replacer.addClass(\"sp-active\");\r\n            container.removeClass(\"sp-hidden\");\r\n\r\n            reflow();\r\n            updateUI();\r\n\r\n            colorOnShow = get();\r\n\r\n            drawInitial();\r\n            callbacks.show(colorOnShow);\r\n            boundElement.trigger('show.ColorPicker', [ colorOnShow ]);\r\n        }\r\n\r\n        function onkeydown(e) {\r\n            // Close on ESC\r\n            if (e.keyCode === 27) {\r\n                hide();\r\n            }\r\n        }\r\n\r\n        function clickout(e) {\r\n            // Return on right click.\r\n            if (e.button == 2) { return; }\r\n\r\n            // If a drag event was happening during the mouseup, don't hide\r\n            // on click.\r\n            if (isDragging) { return; }\r\n\r\n            if (clickoutFiresChange) {\r\n                updateOriginalInput(true);\r\n            }\r\n            else {\r\n                revert();\r\n            }\r\n            hide();\r\n        }\r\n\r\n        function hide() {\r\n            // Return if hiding is unnecessary\r\n            if (!visible || flat) { return; }\r\n            visible = false;\r\n\r\n            $(doc).off(\"keydown.ColorPicker\", onkeydown);\r\n            $(doc).off(\"click.ColorPicker\", clickout);\r\n            $(window).off(\"resize.ColorPicker\", resize);\r\n\r\n            replacer.removeClass(\"sp-active\");\r\n            container.addClass(\"sp-hidden\");\r\n\r\n            callbacks.hide(get());\r\n            boundElement.trigger('hide.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function revert() {\r\n            set(colorOnShow, true);\r\n            updateOriginalInput(true);\r\n        }\r\n\r\n        function set(color, ignoreFormatChange) {\r\n            if (Color.equals(color, get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && allowEmpty) {\r\n                isEmpty = true;\r\n            } else {\r\n                isEmpty = false;\r\n                newColor = colors.Color(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                currentHue = (newHsv.h % 360) / 360;\r\n                currentSaturation = newHsv.s;\r\n                currentValue = newHsv.v;\r\n                currentAlpha = newHsv.a;\r\n            }\r\n            updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        }\r\n\r\n        function get(opts) {\r\n            opts = opts || { };\r\n\r\n            if (allowEmpty && isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            return Color.fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n        }\r\n\r\n        function isValid() {\r\n            return !textInput.hasClass(\"sp-validation-error\");\r\n        }\r\n\r\n        function move() {\r\n            updateUI();\r\n\r\n            callbacks.move(get());\r\n            boundElement.trigger('move.ColorPicker', [ get() ]);\r\n        }\r\n\r\n        function updateUI() {\r\n\r\n            textInput.removeClass(\"sp-validation-error\");\r\n\r\n            updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = currentPreferredFormat;\r\n            if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = get({ format: format }),\r\n                displayColor = '';\r\n\r\n             //reset background info for preview element\r\n            previewElement.removeClass(\"sp-clear-display\");\r\n            previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && allowEmpty) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                previewElement.css(\"background-color\", realRgb);\r\n\r\n                if (opts.showAlpha) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        alphaSliderInner.css(\"filter\", Color(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (opts.showInput) {\r\n                textInput.val(displayColor);\r\n            }\r\n\r\n            if (opts.showPalette) {\r\n                drawPalette();\r\n            }\r\n\r\n            drawInitial();\r\n        }\r\n\r\n        function updateHelperLocations() {\r\n            var s = currentSaturation;\r\n            var v = currentValue;\r\n\r\n            if(allowEmpty && isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                alphaSlideHelper.hide();\r\n                slideHelper.hide();\r\n                dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                alphaSlideHelper.show();\r\n                slideHelper.show();\r\n                dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * dragWidth;\r\n                var dragY = dragHeight - (v * dragHeight);\r\n                dragX = Math.max(\r\n                    -dragHelperHeight,\r\n                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -dragHelperHeight,\r\n                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\r\n                );\r\n                dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = currentAlpha * alphaWidth;\r\n                alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (currentHue) * slideHeight;\r\n                slideHelper.css({\r\n                    \"top\": (slideY - slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        }\r\n\r\n        function updateOriginalInput(fireCallback) {\r\n            var color = get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (isInput) {\r\n                boundElement.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                callbacks.change(color);\r\n                boundElement.trigger('change', [ color ]);\r\n            }\r\n        }\r\n\r\n        function reflow() {\r\n            if (!visible) {\r\n                return; // Calculations would be useless and wouldn't be reliable anyways\r\n            }\r\n            dragWidth = dragger.width();\r\n            dragHeight = dragger.height();\r\n            dragHelperHeight = dragHelper.height();\r\n            slideWidth = slider.width();\r\n            slideHeight = slider.height();\r\n            slideHelperHeight = slideHelper.height();\r\n            alphaWidth = alphaSlider.width();\r\n            alphaSlideHelperWidth = alphaSlideHelper.width();\r\n\r\n            if (!flat) {\r\n                container.css(\"position\", \"absolute\");\r\n                if (opts.offset) {\r\n                    container.offset(opts.offset);\r\n                } else {\r\n                    container.offset(getOffset(container, offsetElement));\r\n                }\r\n            }\r\n\r\n            updateHelperLocations();\r\n\r\n            if (opts.showPalette) {\r\n                drawPalette();\r\n            }\r\n\r\n            boundElement.trigger('reflow.ColorPicker');\r\n        }\r\n\r\n        function destroy() {\r\n            boundElement.show();\r\n            offsetElement.off(\"click.ColorPicker touchstart.ColorPicker\");\r\n            container.remove();\r\n            replacer.remove();\r\n            pickers[spect.id] = null;\r\n        }\r\n\r\n        function option(optionName, optionValue) {\r\n            if (optionName === undefined) {\r\n                return langx.mixin({}, opts);\r\n            }\r\n            if (optionValue === undefined) {\r\n                return opts[optionName];\r\n            }\r\n\r\n            opts[optionName] = optionValue;\r\n\r\n            if (optionName === \"preferredFormat\") {\r\n                currentPreferredFormat = opts.preferredFormat;\r\n            }\r\n            applyOptions();\r\n        }\r\n\r\n        function enable() {\r\n            disabled = false;\r\n            boundElement.attr(\"disabled\", false);\r\n            offsetElement.removeClass(\"sp-disabled\");\r\n        }\r\n\r\n        function disable() {\r\n            hide();\r\n            disabled = true;\r\n            boundElement.attr(\"disabled\", true);\r\n            offsetElement.addClass(\"sp-disabled\");\r\n        }\r\n\r\n        function setOffset(coord) {\r\n            opts.offset = coord;\r\n            reflow();\r\n        }\r\n\r\n        initialize();\r\n\r\n        var spect = {\r\n            show: show,\r\n            hide: hide,\r\n            toggle: toggle,\r\n            reflow: reflow,\r\n            option: option,\r\n            enable: enable,\r\n            disable: disable,\r\n            offset: setOffset,\r\n            set: function (c) {\r\n                set(c);\r\n                updateOriginalInput();\r\n            },\r\n            get: get,\r\n            destroy: destroy,\r\n            container: container\r\n        };\r\n\r\n        spect.id = pickers.push(spect) - 1;\r\n\r\n        return spect;\r\n    }\r\n\r\n    var ColorPicker = langx.Evented.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        init : init\r\n\r\n    });\r\n\r\n\r\n    /**\r\n    * checkOffset - get the offset below/above and left/right element depending on screen position\r\n    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\r\n    */\r\n    function getOffset(picker, input) {\r\n        var extraY = 0;\r\n        var dpWidth = picker.outerWidth();\r\n        var dpHeight = picker.outerHeight();\r\n        var inputHeight = input.outerHeight();\r\n        var doc = picker[0].ownerDocument;\r\n        var docElem = doc.documentElement;\r\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\r\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\r\n        var offset = input.offset();\r\n        var offsetLeft = offset.left;\r\n        var offsetTop = offset.top;\r\n\r\n        offsetTop += inputHeight;\r\n\r\n        offsetLeft -=\r\n            Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?\r\n            Math.abs(offsetLeft + dpWidth - viewWidth) : 0);\r\n\r\n        offsetTop -=\r\n            Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?\r\n            Math.abs(dpHeight + inputHeight - extraY) : extraY));\r\n\r\n        return {\r\n            top: offsetTop,\r\n            bottom: offset.bottom,\r\n            left: offsetLeft,\r\n            right: offset.right,\r\n            width: offset.width,\r\n            height: offset.height\r\n        };\r\n    }\r\n\r\n    /**\r\n    * stopPropagation - makes the code only doing this a little easier to read in line\r\n    */\r\n    function stopPropagation(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    /**\r\n    * Create a function bound to a given object\r\n    * Thanks to underscore.js\r\n    */\r\n    function bind(func, obj) {\r\n        var slice = Array.prototype.slice;\r\n        var args = slice.call(arguments, 2);\r\n        return function () {\r\n            return func.apply(obj, args.concat(slice.call(arguments)));\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\r\n    /**\r\n    * Define a query plugin\r\n    */\r\n    var dataID = \"ColorPicker.id\";\r\n    \r\n    function Plugin(opts, extra) {\r\n\r\n        if (typeof opts == \"string\") {\r\n\r\n            var returnValue = this;\r\n            var args = Array.prototype.slice.call( arguments, 1 );\r\n\r\n            this.each(function () {\r\n                var spect = pickers[$(this).data(dataID)];\r\n                if (spect) {\r\n                    var method = spect[opts];\r\n                    if (!method) {\r\n                        throw new Error( \"skylark-ui-colorpicker: no such method: '\" + opts + \"'\" );\r\n                    }\r\n\r\n                    if (opts == \"get\") {\r\n                        returnValue = spect.get();\r\n                    }\r\n                    else if (opts == \"container\") {\r\n                        returnValue = spect.container;\r\n                    }\r\n                    else if (opts == \"option\") {\r\n                        returnValue = spect.option.apply(spect, args);\r\n                    }\r\n                    else if (opts == \"destroy\") {\r\n                        spect.destroy();\r\n                        $(this).removeData(dataID);\r\n                    }\r\n                    else {\r\n                        method.apply(spect, args);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        // Initializing a new instance of ColorPicker\r\n        return this.colorPicker(\"destroy\").each(function () {\r\n            var options = langx.mixin({}, $(this).data(), opts);\r\n            var spect = ColorPicker(this, options);\r\n            $(this).data(dataID, spect.id);\r\n        });\r\n    }\r\n\r\n    ColorPicker.load = true;\r\n    ColorPicker.loadOpts = {};\r\n    ColorPicker.draggable = draggable;\r\n    ColorPicker.defaults = defaultOpts;\r\n\r\n    ColorPicker.localization = { };\r\n    ColorPicker.palettes = { };\r\n\r\n    $.fn.colorPicker = Plugin;\r\n\r\n    return ColorPicker;\r\n\r\n});\r\n\ndefine('skylark-ui-colorpicker/i18n/texts_ja',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n\r\n    return localization;\r\n});\ndefine('skylark-ui-colorpicker/i18n/texts_zh-cn',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\r\n\ndefine('skylark-ui-colorpicker/i18n/texts_zh-tw',[\r\n\t\"../ColorPicker\"\r\n],function(ColorPicker) {\r\n    var localization = ColorPicker.localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n    return localization;\r\n\r\n});\ndefine('skylark-ui-colorpicker/main',[\r\n    \"./ColorPicker\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function(ColorPicker) {\r\n    return ColorPicker;\r\n});\r\n\ndefine('skylark-ui-colorpicker', ['skylark-ui-colorpicker/main'], function (main) { return main; });\n\n"]}